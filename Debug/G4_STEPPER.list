
G4_STEPPER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005868  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08005a48  08005a48  00015a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ae0  08005ae0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ae0  08005ae0  00015ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ae8  08005ae8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ae8  08005ae8  00015ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005aec  08005aec  00015aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005af0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000005c  08005b4c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08005b4c  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012f37  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000281f  00000000  00000000  00033006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001078  00000000  00000000  00035828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cd2  00000000  00000000  000368a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000261b7  00000000  00000000  00037572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001493b  00000000  00000000  0005d729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9ffe  00000000  00000000  00072064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a1c  00000000  00000000  0016c064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00170a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005a30 	.word	0x08005a30

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08005a30 	.word	0x08005a30

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08a      	sub	sp, #40	; 0x28
 80005c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005d2:	4b4e      	ldr	r3, [pc, #312]	; (800070c <MX_GPIO_Init+0x150>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	4a4d      	ldr	r2, [pc, #308]	; (800070c <MX_GPIO_Init+0x150>)
 80005d8:	f043 0320 	orr.w	r3, r3, #32
 80005dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005de:	4b4b      	ldr	r3, [pc, #300]	; (800070c <MX_GPIO_Init+0x150>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	f003 0320 	and.w	r3, r3, #32
 80005e6:	613b      	str	r3, [r7, #16]
 80005e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	4b48      	ldr	r3, [pc, #288]	; (800070c <MX_GPIO_Init+0x150>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	4a47      	ldr	r2, [pc, #284]	; (800070c <MX_GPIO_Init+0x150>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f6:	4b45      	ldr	r3, [pc, #276]	; (800070c <MX_GPIO_Init+0x150>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	4b42      	ldr	r3, [pc, #264]	; (800070c <MX_GPIO_Init+0x150>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000606:	4a41      	ldr	r2, [pc, #260]	; (800070c <MX_GPIO_Init+0x150>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060e:	4b3f      	ldr	r3, [pc, #252]	; (800070c <MX_GPIO_Init+0x150>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	4b3c      	ldr	r3, [pc, #240]	; (800070c <MX_GPIO_Init+0x150>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	4a3b      	ldr	r2, [pc, #236]	; (800070c <MX_GPIO_Init+0x150>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000626:	4b39      	ldr	r3, [pc, #228]	; (800070c <MX_GPIO_Init+0x150>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000632:	4b36      	ldr	r3, [pc, #216]	; (800070c <MX_GPIO_Init+0x150>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000636:	4a35      	ldr	r2, [pc, #212]	; (800070c <MX_GPIO_Init+0x150>)
 8000638:	f043 0308 	orr.w	r3, r3, #8
 800063c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800063e:	4b33      	ldr	r3, [pc, #204]	; (800070c <MX_GPIO_Init+0x150>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	f003 0308 	and.w	r3, r3, #8
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CFG3_Pin|CFG2_Pin|CFG1_Pin|CFG0_Pin
 800064a:	2200      	movs	r2, #0
 800064c:	f641 21f0 	movw	r1, #6896	; 0x1af0
 8000650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000654:	f000 ffb6 	bl	80015c4 <HAL_GPIO_WritePin>
                          |DIR_Pin|SPI_MODE_Pin|SD_MODE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	2120      	movs	r1, #32
 800065c:	482c      	ldr	r0, [pc, #176]	; (8000710 <MX_GPIO_Init+0x154>)
 800065e:	f000 ffb1 	bl	80015c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CFG4_Pin|CFG6_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2105      	movs	r1, #5
 8000666:	482b      	ldr	r0, [pc, #172]	; (8000714 <MX_GPIO_Init+0x158>)
 8000668:	f000 ffac 	bl	80015c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	2104      	movs	r1, #4
 8000670:	4829      	ldr	r0, [pc, #164]	; (8000718 <MX_GPIO_Init+0x15c>)
 8000672:	f000 ffa7 	bl	80015c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CFG3_Pin|CFG2_Pin|CFG1_Pin|CFG0_Pin
 8000676:	f641 23f0 	movw	r3, #6896	; 0x1af0
 800067a:	617b      	str	r3, [r7, #20]
                          |DIR_Pin|SPI_MODE_Pin|SD_MODE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067c:	2301      	movs	r3, #1
 800067e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2300      	movs	r3, #0
 8000686:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	4619      	mov	r1, r3
 800068e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000692:	f000 fe15 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRV_EN_Pin;
 8000696:	2320      	movs	r3, #32
 8000698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	2301      	movs	r3, #1
 800069c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV_EN_GPIO_Port, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	4818      	ldr	r0, [pc, #96]	; (8000710 <MX_GPIO_Init+0x154>)
 80006ae:	f000 fe07 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CFG4_Pin|CFG6_Pin;
 80006b2:	2305      	movs	r3, #5
 80006b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b6:	2301      	movs	r3, #1
 80006b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	2300      	movs	r3, #0
 80006c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	4619      	mov	r1, r3
 80006c8:	4812      	ldr	r0, [pc, #72]	; (8000714 <MX_GPIO_Init+0x158>)
 80006ca:	f000 fdf9 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CFG5_Pin;
 80006ce:	2302      	movs	r3, #2
 80006d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CFG5_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	4619      	mov	r1, r3
 80006e2:	480c      	ldr	r0, [pc, #48]	; (8000714 <MX_GPIO_Init+0x158>)
 80006e4:	f000 fdec 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006e8:	2304      	movs	r3, #4
 80006ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4619      	mov	r1, r3
 80006fe:	4806      	ldr	r0, [pc, #24]	; (8000718 <MX_GPIO_Init+0x15c>)
 8000700:	f000 fdde 	bl	80012c0 <HAL_GPIO_Init>

}
 8000704:	bf00      	nop
 8000706:	3728      	adds	r7, #40	; 0x28
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40021000 	.word	0x40021000
 8000710:	48000800 	.word	0x48000800
 8000714:	48000400 	.word	0x48000400
 8000718:	48000c00 	.word	0x48000c00

0800071c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08e      	sub	sp, #56	; 0x38
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000722:	f000 fb6a 	bl	8000dfa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000726:	f000 f87f 	bl	8000828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072a:	f7ff ff47 	bl	80005bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800072e:	f000 fa8f 	bl	8000c50 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000732:	f000 f98b 	bl	8000a4c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //Config via pins see p.116 of TMC5160 datasheet
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1); //DRV SLEEP 0 for power on, 1 for power off
 8000736:	2201      	movs	r2, #1
 8000738:	2120      	movs	r1, #32
 800073a:	4836      	ldr	r0, [pc, #216]	; (8000814 <main+0xf8>)
 800073c:	f000 ff42 	bl	80015c4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET); //SD_MODE ON
 8000740:	2201      	movs	r2, #1
 8000742:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074a:	f000 ff3b 	bl	80015c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET); //SPI_MODE OFF
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000758:	f000 ff34 	bl	80015c4 <HAL_GPIO_WritePin>
  HAL_Delay(100); //Sanity delay
 800075c:	2064      	movs	r0, #100	; 0x64
 800075e:	f000 fbbd 	bl	8000edc <HAL_Delay>

  //64 microsteps, MRES=5
  HAL_GPIO_WritePin(CFG0_GPIO_Port, CFG0_Pin, GPIO_PIN_SET); //CFG0
 8000762:	2201      	movs	r2, #1
 8000764:	2180      	movs	r1, #128	; 0x80
 8000766:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076a:	f000 ff2b 	bl	80015c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CFG1_GPIO_Port, CFG1_Pin, GPIO_PIN_SET); //CFG1
 800076e:	2201      	movs	r2, #1
 8000770:	2140      	movs	r1, #64	; 0x40
 8000772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000776:	f000 ff25 	bl	80015c4 <HAL_GPIO_WritePin>
  VCC_IO GND     32 microsteps, MRES=3
  VCC_IO VCC_IO  64 microsteps, MRES=2
  */

  //IRUN=16
  HAL_GPIO_WritePin(CFG2_GPIO_Port, CFG2_Pin, GPIO_PIN_RESET); //CFG2
 800077a:	2200      	movs	r2, #0
 800077c:	2120      	movs	r1, #32
 800077e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000782:	f000 ff1f 	bl	80015c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CFG3_GPIO_Port, CFG3_Pin, GPIO_PIN_RESET); //CFG3
 8000786:	2200      	movs	r2, #0
 8000788:	2110      	movs	r1, #16
 800078a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078e:	f000 ff19 	bl	80015c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CFG4_GPIO_Port, CFG4_Pin, GPIO_PIN_RESET); //CFG4
 8000792:	2200      	movs	r2, #0
 8000794:	2101      	movs	r1, #1
 8000796:	4820      	ldr	r0, [pc, #128]	; (8000818 <main+0xfc>)
 8000798:	f000 ff14 	bl	80015c4 <HAL_GPIO_WritePin>
	VCC_IO  VCC_IO  GND    IRUN=28
	VCC_IO  VCC_IO  VCC_IO IRUN=31
   */

  //StealthChop operation
  HAL_GPIO_WritePin(CFG5_GPIO_Port, CFG5_Pin, GPIO_PIN_RESET); //CFG5
 800079c:	2200      	movs	r2, #0
 800079e:	2102      	movs	r1, #2
 80007a0:	481d      	ldr	r0, [pc, #116]	; (8000818 <main+0xfc>)
 80007a2:	f000 ff0f 	bl	80015c4 <HAL_GPIO_WritePin>
   VCC_IO StealthChop operation. (GCONF.en_PWM_mode=1)
   */


  //IHOLD Reduction to 50%. IHOLD=1/2 IRUN
  HAL_GPIO_WritePin(CFG6_GPIO_Port, CFG6_Pin, GPIO_PIN_SET); //CFG6
 80007a6:	2201      	movs	r2, #1
 80007a8:	2104      	movs	r1, #4
 80007aa:	481b      	ldr	r0, [pc, #108]	; (8000818 <main+0xfc>)
 80007ac:	f000 ff0a 	bl	80015c4 <HAL_GPIO_WritePin>
	VCC_IO 	Reduction to 50%. IHOLD=1/2 IRUN
  */



  HAL_Delay(1000); //sanity delay
 80007b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b4:	f000 fb92 	bl	8000edc <HAL_Delay>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0); //DIR
 80007b8:	2200      	movs	r2, #0
 80007ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c2:	f000 feff 	bl	80015c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0); //DRV Enable 0 for power on, 1 for power off
 80007c6:	2200      	movs	r2, #0
 80007c8:	2120      	movs	r1, #32
 80007ca:	4812      	ldr	r0, [pc, #72]	; (8000814 <main+0xf8>)
 80007cc:	f000 fefa 	bl	80015c4 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //Start timer
  HAL_TIM_Base_Start(&htim1);
 80007d0:	4812      	ldr	r0, [pc, #72]	; (800081c <main+0x100>)
 80007d2:	f001 ff35 	bl	8002640 <HAL_TIM_Base_Start>
  //Start timer PWM
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007d6:	2100      	movs	r1, #0
 80007d8:	4810      	ldr	r0, [pc, #64]	; (800081c <main+0x100>)
 80007da:	f002 f859 	bl	8002890 <HAL_TIM_PWM_Start>

  //setting the speed of rotation
  uint8_t speed = 100; //  * 0.01 rad / sec
 80007de:	2364      	movs	r3, #100	; 0x64
 80007e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  //timer settings
  AngularSpeedToTimerPWMParametrs(speed);
 80007e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 f868 	bl	80008c0 <AngularSpeedToTimerPWMParametrs>

  while (1)
  {
	  uint8_t str[50];
	  sprintf(str,"Rotating %d * 0.01 rad / sec \r\n\0", speed);
 80007f0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	490a      	ldr	r1, [pc, #40]	; (8000820 <main+0x104>)
 80007f8:	4618      	mov	r0, r3
 80007fa:	f004 fc75 	bl	80050e8 <siprintf>
	  HAL_UART_Transmit_IT(&huart2, str, sizeof(str));
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2232      	movs	r2, #50	; 0x32
 8000802:	4619      	mov	r1, r3
 8000804:	4807      	ldr	r0, [pc, #28]	; (8000824 <main+0x108>)
 8000806:	f003 f873 	bl	80038f0 <HAL_UART_Transmit_IT>
	  HAL_Delay(100);
 800080a:	2064      	movs	r0, #100	; 0x64
 800080c:	f000 fb66 	bl	8000edc <HAL_Delay>
  {
 8000810:	e7ee      	b.n	80007f0 <main+0xd4>
 8000812:	bf00      	nop
 8000814:	48000800 	.word	0x48000800
 8000818:	48000400 	.word	0x48000400
 800081c:	2000007c 	.word	0x2000007c
 8000820:	08005a48 	.word	0x08005a48
 8000824:	200000c8 	.word	0x200000c8

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b094      	sub	sp, #80	; 0x50
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	f107 0318 	add.w	r3, r7, #24
 8000832:	2238      	movs	r2, #56	; 0x38
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f004 fc76 	bl	8005128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800084a:	2000      	movs	r0, #0
 800084c:	f000 fed2 	bl	80015f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000850:	2301      	movs	r3, #1
 8000852:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000854:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000858:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085a:	2302      	movs	r3, #2
 800085c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085e:	2303      	movs	r3, #3
 8000860:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000862:	2301      	movs	r3, #1
 8000864:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000866:	2328      	movs	r3, #40	; 0x28
 8000868:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800086a:	2302      	movs	r3, #2
 800086c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800086e:	2302      	movs	r3, #2
 8000870:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000872:	2302      	movs	r3, #2
 8000874:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000876:	f107 0318 	add.w	r3, r7, #24
 800087a:	4618      	mov	r0, r3
 800087c:	f000 ff5e 	bl	800173c <HAL_RCC_OscConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000886:	f000 f83b 	bl	8000900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088a:	230f      	movs	r3, #15
 800088c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088e:	2303      	movs	r3, #3
 8000890:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000896:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800089a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800089c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2104      	movs	r1, #4
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 fa60 	bl	8001d6c <HAL_RCC_ClockConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80008b2:	f000 f825 	bl	8000900 <Error_Handler>
  }
}
 80008b6:	bf00      	nop
 80008b8:	3750      	adds	r7, #80	; 0x50
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <AngularSpeedToTimerPWMParametrs>:

/* USER CODE BEGIN 4 */
void AngularSpeedToTimerPWMParametrs(uint16_t w)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	80fb      	strh	r3, [r7, #6]

int step_duration = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
step_duration = (int)((100 / w) * 100); //100 total duration of UP + DOWN of STEP
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	2264      	movs	r2, #100	; 0x64
 80008d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80008d6:	2264      	movs	r2, #100	; 0x64
 80008d8:	fb02 f303 	mul.w	r3, r2, r3
 80008dc:	60fb      	str	r3, [r7, #12]
TIM1->PSC = 15;
 80008de:	4b07      	ldr	r3, [pc, #28]	; (80008fc <AngularSpeedToTimerPWMParametrs+0x3c>)
 80008e0:	220f      	movs	r2, #15
 80008e2:	629a      	str	r2, [r3, #40]	; 0x28
TIM1->ARR = step_duration;
 80008e4:	4a05      	ldr	r2, [pc, #20]	; (80008fc <AngularSpeedToTimerPWMParametrs+0x3c>)
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	62d3      	str	r3, [r2, #44]	; 0x2c
TIM1->CCR1 = 40; // 40 is min duration of UP of STEP
 80008ea:	4b04      	ldr	r3, [pc, #16]	; (80008fc <AngularSpeedToTimerPWMParametrs+0x3c>)
 80008ec:	2228      	movs	r2, #40	; 0x28
 80008ee:	635a      	str	r2, [r3, #52]	; 0x34
}
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	40012c00 	.word	0x40012c00

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000908:	e7fe      	b.n	8000908 <Error_Handler+0x8>
	...

0800090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <HAL_MspInit+0x44>)
 8000914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000916:	4a0e      	ldr	r2, [pc, #56]	; (8000950 <HAL_MspInit+0x44>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6613      	str	r3, [r2, #96]	; 0x60
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <HAL_MspInit+0x44>)
 8000920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <HAL_MspInit+0x44>)
 800092c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800092e:	4a08      	ldr	r2, [pc, #32]	; (8000950 <HAL_MspInit+0x44>)
 8000930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000934:	6593      	str	r3, [r2, #88]	; 0x58
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_MspInit+0x44>)
 8000938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000

08000954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <NMI_Handler+0x4>

0800095a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <HardFault_Handler+0x4>

08000960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <MemManage_Handler+0x4>

08000966 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <BusFault_Handler+0x4>

0800096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <UsageFault_Handler+0x4>

08000972 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a0:	f000 fa7e 	bl	8000ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009ac:	4802      	ldr	r0, [pc, #8]	; (80009b8 <USART2_IRQHandler+0x10>)
 80009ae:	f003 f847 	bl	8003a40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200000c8 	.word	0x200000c8

080009bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009c4:	4a14      	ldr	r2, [pc, #80]	; (8000a18 <_sbrk+0x5c>)
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <_sbrk+0x60>)
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <_sbrk+0x64>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d102      	bne.n	80009de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <_sbrk+0x64>)
 80009da:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <_sbrk+0x68>)
 80009dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <_sbrk+0x64>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4413      	add	r3, r2
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d207      	bcs.n	80009fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009ec:	f004 fba4 	bl	8005138 <__errno>
 80009f0:	4603      	mov	r3, r0
 80009f2:	220c      	movs	r2, #12
 80009f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295
 80009fa:	e009      	b.n	8000a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <_sbrk+0x64>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a02:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <_sbrk+0x64>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <_sbrk+0x64>)
 8000a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20020000 	.word	0x20020000
 8000a1c:	00000400 	.word	0x00000400
 8000a20:	20000078 	.word	0x20000078
 8000a24:	200002a8 	.word	0x200002a8

08000a28 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <SystemInit+0x20>)
 8000a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a32:	4a05      	ldr	r2, [pc, #20]	; (8000a48 <SystemInit+0x20>)
 8000a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b098      	sub	sp, #96	; 0x60
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]
 8000a6e:	615a      	str	r2, [r3, #20]
 8000a70:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	2234      	movs	r2, #52	; 0x34
 8000a76:	2100      	movs	r1, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f004 fb55 	bl	8005128 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a7e:	4b46      	ldr	r3, [pc, #280]	; (8000b98 <MX_TIM1_Init+0x14c>)
 8000a80:	4a46      	ldr	r2, [pc, #280]	; (8000b9c <MX_TIM1_Init+0x150>)
 8000a82:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1599;
 8000a84:	4b44      	ldr	r3, [pc, #272]	; (8000b98 <MX_TIM1_Init+0x14c>)
 8000a86:	f240 623f 	movw	r2, #1599	; 0x63f
 8000a8a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8c:	4b42      	ldr	r3, [pc, #264]	; (8000b98 <MX_TIM1_Init+0x14c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000a92:	4b41      	ldr	r3, [pc, #260]	; (8000b98 <MX_TIM1_Init+0x14c>)
 8000a94:	2264      	movs	r2, #100	; 0x64
 8000a96:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a98:	4b3f      	ldr	r3, [pc, #252]	; (8000b98 <MX_TIM1_Init+0x14c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a9e:	4b3e      	ldr	r3, [pc, #248]	; (8000b98 <MX_TIM1_Init+0x14c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa4:	4b3c      	ldr	r3, [pc, #240]	; (8000b98 <MX_TIM1_Init+0x14c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000aaa:	483b      	ldr	r0, [pc, #236]	; (8000b98 <MX_TIM1_Init+0x14c>)
 8000aac:	f001 fe99 	bl	80027e2 <HAL_TIM_PWM_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000ab6:	f7ff ff23 	bl	8000900 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000aba:	4837      	ldr	r0, [pc, #220]	; (8000b98 <MX_TIM1_Init+0x14c>)
 8000abc:	f001 fe30 	bl	8002720 <HAL_TIM_OC_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000ac6:	f7ff ff1b 	bl	8000900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aca:	2300      	movs	r3, #0
 8000acc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ad6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ada:	4619      	mov	r1, r3
 8000adc:	482e      	ldr	r0, [pc, #184]	; (8000b98 <MX_TIM1_Init+0x14c>)
 8000ade:	f002 fd6f 	bl	80035c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000ae8:	f7ff ff0a 	bl	8000900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000aec:	2370      	movs	r3, #112	; 0x70
 8000aee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af4:	2300      	movs	r3, #0
 8000af6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000af8:	2300      	movs	r3, #0
 8000afa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b00:	2300      	movs	r3, #0
 8000b02:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b04:	2300      	movs	r3, #0
 8000b06:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4821      	ldr	r0, [pc, #132]	; (8000b98 <MX_TIM1_Init+0x14c>)
 8000b12:	f002 f849 	bl	8002ba8 <HAL_TIM_PWM_ConfigChannel>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000b1c:	f7ff fef0 	bl	8000900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000b20:	2300      	movs	r3, #0
 8000b22:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b28:	2204      	movs	r2, #4
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	481a      	ldr	r0, [pc, #104]	; (8000b98 <MX_TIM1_Init+0x14c>)
 8000b2e:	f001 ffc1 	bl	8002ab4 <HAL_TIM_OC_ConfigChannel>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000b38:	f7ff fee2 	bl	8000900 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b54:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	4619      	mov	r1, r3
 8000b78:	4807      	ldr	r0, [pc, #28]	; (8000b98 <MX_TIM1_Init+0x14c>)
 8000b7a:	f002 fdb7 	bl	80036ec <HAL_TIMEx_ConfigBreakDeadTime>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000b84:	f7ff febc 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b88:	4803      	ldr	r0, [pc, #12]	; (8000b98 <MX_TIM1_Init+0x14c>)
 8000b8a:	f000 f829 	bl	8000be0 <HAL_TIM_MspPostInit>

}
 8000b8e:	bf00      	nop
 8000b90:	3760      	adds	r7, #96	; 0x60
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	2000007c 	.word	0x2000007c
 8000b9c:	40012c00 	.word	0x40012c00

08000ba0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <HAL_TIM_PWM_MspInit+0x38>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d10b      	bne.n	8000bca <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <HAL_TIM_PWM_MspInit+0x3c>)
 8000bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb6:	4a09      	ldr	r2, [pc, #36]	; (8000bdc <HAL_TIM_PWM_MspInit+0x3c>)
 8000bb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bbc:	6613      	str	r3, [r2, #96]	; 0x60
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <HAL_TIM_PWM_MspInit+0x3c>)
 8000bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000bca:	bf00      	nop
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40012c00 	.word	0x40012c00
 8000bdc:	40021000 	.word	0x40021000

08000be0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 030c 	add.w	r3, r7, #12
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <HAL_TIM_MspPostInit+0x68>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d11d      	bne.n	8000c3e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_TIM_MspPostInit+0x6c>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	4a11      	ldr	r2, [pc, #68]	; (8000c4c <HAL_TIM_MspPostInit+0x6c>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <HAL_TIM_MspPostInit+0x6c>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000c2c:	2306      	movs	r3, #6
 8000c2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c30:	f107 030c 	add.w	r3, r7, #12
 8000c34:	4619      	mov	r1, r3
 8000c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3a:	f000 fb41 	bl	80012c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c3e:	bf00      	nop
 8000c40:	3720      	adds	r7, #32
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40012c00 	.word	0x40012c00
 8000c4c:	40021000 	.word	0x40021000

08000c50 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c54:	4b22      	ldr	r3, [pc, #136]	; (8000ce0 <MX_USART2_UART_Init+0x90>)
 8000c56:	4a23      	ldr	r2, [pc, #140]	; (8000ce4 <MX_USART2_UART_Init+0x94>)
 8000c58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <MX_USART2_UART_Init+0x90>)
 8000c5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c62:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <MX_USART2_UART_Init+0x90>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c68:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <MX_USART2_UART_Init+0x90>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <MX_USART2_UART_Init+0x90>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c74:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <MX_USART2_UART_Init+0x90>)
 8000c76:	220c      	movs	r2, #12
 8000c78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <MX_USART2_UART_Init+0x90>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c80:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <MX_USART2_UART_Init+0x90>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c86:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <MX_USART2_UART_Init+0x90>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c8c:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <MX_USART2_UART_Init+0x90>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <MX_USART2_UART_Init+0x90>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c98:	4811      	ldr	r0, [pc, #68]	; (8000ce0 <MX_USART2_UART_Init+0x90>)
 8000c9a:	f002 fdd9 	bl	8003850 <HAL_UART_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ca4:	f7ff fe2c 	bl	8000900 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca8:	2100      	movs	r1, #0
 8000caa:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <MX_USART2_UART_Init+0x90>)
 8000cac:	f004 f951 	bl	8004f52 <HAL_UARTEx_SetTxFifoThreshold>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000cb6:	f7ff fe23 	bl	8000900 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4808      	ldr	r0, [pc, #32]	; (8000ce0 <MX_USART2_UART_Init+0x90>)
 8000cbe:	f004 f986 	bl	8004fce <HAL_UARTEx_SetRxFifoThreshold>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000cc8:	f7ff fe1a 	bl	8000900 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ccc:	4804      	ldr	r0, [pc, #16]	; (8000ce0 <MX_USART2_UART_Init+0x90>)
 8000cce:	f004 f907 	bl	8004ee0 <HAL_UARTEx_DisableFifoMode>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000cd8:	f7ff fe12 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	200000c8 	.word	0x200000c8
 8000ce4:	40004400 	.word	0x40004400

08000ce8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b09e      	sub	sp, #120	; 0x78
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d00:	f107 0310 	add.w	r3, r7, #16
 8000d04:	2254      	movs	r2, #84	; 0x54
 8000d06:	2100      	movs	r1, #0
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f004 fa0d 	bl	8005128 <memset>
  if(uartHandle->Instance==USART2)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a23      	ldr	r2, [pc, #140]	; (8000da0 <HAL_UART_MspInit+0xb8>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d13e      	bne.n	8000d96 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d20:	f107 0310 	add.w	r3, r7, #16
 8000d24:	4618      	mov	r0, r3
 8000d26:	f001 fa3d 	bl	80021a4 <HAL_RCCEx_PeriphCLKConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d30:	f7ff fde6 	bl	8000900 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d34:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <HAL_UART_MspInit+0xbc>)
 8000d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d38:	4a1a      	ldr	r2, [pc, #104]	; (8000da4 <HAL_UART_MspInit+0xbc>)
 8000d3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d3e:	6593      	str	r3, [r2, #88]	; 0x58
 8000d40:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <HAL_UART_MspInit+0xbc>)
 8000d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4c:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <HAL_UART_MspInit+0xbc>)
 8000d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d50:	4a14      	ldr	r2, [pc, #80]	; (8000da4 <HAL_UART_MspInit+0xbc>)
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_UART_MspInit+0xbc>)
 8000d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d64:	230c      	movs	r3, #12
 8000d66:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d74:	2307      	movs	r3, #7
 8000d76:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d82:	f000 fa9d 	bl	80012c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2026      	movs	r0, #38	; 0x26
 8000d8c:	f000 f9a3 	bl	80010d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d90:	2026      	movs	r0, #38	; 0x26
 8000d92:	f000 f9ba 	bl	800110a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d96:	bf00      	nop
 8000d98:	3778      	adds	r7, #120	; 0x78
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40004400 	.word	0x40004400
 8000da4:	40021000 	.word	0x40021000

08000da8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000da8:	480d      	ldr	r0, [pc, #52]	; (8000de0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000daa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dac:	480d      	ldr	r0, [pc, #52]	; (8000de4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dae:	490e      	ldr	r1, [pc, #56]	; (8000de8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000db0:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <LoopForever+0xe>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000db4:	e002      	b.n	8000dbc <LoopCopyDataInit>

08000db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dba:	3304      	adds	r3, #4

08000dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc0:	d3f9      	bcc.n	8000db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dc4:	4c0b      	ldr	r4, [pc, #44]	; (8000df4 <LoopForever+0x16>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc8:	e001      	b.n	8000dce <LoopFillZerobss>

08000dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dcc:	3204      	adds	r2, #4

08000dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd0:	d3fb      	bcc.n	8000dca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dd2:	f7ff fe29 	bl	8000a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dd6:	f004 f9b5 	bl	8005144 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dda:	f7ff fc9f 	bl	800071c <main>

08000dde <LoopForever>:

LoopForever:
    b LoopForever
 8000dde:	e7fe      	b.n	8000dde <LoopForever>
  ldr   r0, =_estack
 8000de0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000dec:	08005af0 	.word	0x08005af0
  ldr r2, =_sbss
 8000df0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000df4:	200002a4 	.word	0x200002a4

08000df8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC1_2_IRQHandler>

08000dfa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e00:	2300      	movs	r3, #0
 8000e02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 f95b 	bl	80010c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e0a:	200f      	movs	r0, #15
 8000e0c:	f000 f80e 	bl	8000e2c <HAL_InitTick>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d002      	beq.n	8000e1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	71fb      	strb	r3, [r7, #7]
 8000e1a:	e001      	b.n	8000e20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e1c:	f7ff fd76 	bl	800090c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e20:	79fb      	ldrb	r3, [r7, #7]

}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e34:	2300      	movs	r3, #0
 8000e36:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <HAL_InitTick+0x68>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d022      	beq.n	8000e86 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e40:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <HAL_InitTick+0x6c>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <HAL_InitTick+0x68>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 f966 	bl	8001126 <HAL_SYSTICK_Config>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d10f      	bne.n	8000e80 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b0f      	cmp	r3, #15
 8000e64:	d809      	bhi.n	8000e7a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e66:	2200      	movs	r2, #0
 8000e68:	6879      	ldr	r1, [r7, #4]
 8000e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6e:	f000 f932 	bl	80010d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e72:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <HAL_InitTick+0x70>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6013      	str	r3, [r2, #0]
 8000e78:	e007      	b.n	8000e8a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	73fb      	strb	r3, [r7, #15]
 8000e7e:	e004      	b.n	8000e8a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	73fb      	strb	r3, [r7, #15]
 8000e84:	e001      	b.n	8000e8a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000004 	.word	0x20000004

08000ea0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <HAL_IncTick+0x1c>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_IncTick+0x20>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4413      	add	r3, r2
 8000eae:	4a03      	ldr	r2, [pc, #12]	; (8000ebc <HAL_IncTick+0x1c>)
 8000eb0:	6013      	str	r3, [r2, #0]
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	20000158 	.word	0x20000158
 8000ec0:	20000008 	.word	0x20000008

08000ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <HAL_GetTick+0x14>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000158 	.word	0x20000158

08000edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee4:	f7ff ffee 	bl	8000ec4 <HAL_GetTick>
 8000ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef4:	d004      	beq.n	8000f00 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <HAL_Delay+0x40>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	4413      	add	r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f00:	bf00      	nop
 8000f02:	f7ff ffdf 	bl	8000ec4 <HAL_GetTick>
 8000f06:	4602      	mov	r2, r0
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	68fa      	ldr	r2, [r7, #12]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d8f7      	bhi.n	8000f02 <HAL_Delay+0x26>
  {
  }
}
 8000f12:	bf00      	nop
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000008 	.word	0x20000008

08000f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f52:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	60d3      	str	r3, [r2, #12]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <__NVIC_GetPriorityGrouping+0x18>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	f003 0307 	and.w	r3, r3, #7
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	db0b      	blt.n	8000fae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	f003 021f 	and.w	r2, r3, #31
 8000f9c:	4907      	ldr	r1, [pc, #28]	; (8000fbc <__NVIC_EnableIRQ+0x38>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	095b      	lsrs	r3, r3, #5
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8000faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000e100 	.word	0xe000e100

08000fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	db0a      	blt.n	8000fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	490c      	ldr	r1, [pc, #48]	; (800100c <__NVIC_SetPriority+0x4c>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	0112      	lsls	r2, r2, #4
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe8:	e00a      	b.n	8001000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4908      	ldr	r1, [pc, #32]	; (8001010 <__NVIC_SetPriority+0x50>)
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	3b04      	subs	r3, #4
 8000ff8:	0112      	lsls	r2, r2, #4
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	761a      	strb	r2, [r3, #24]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000e100 	.word	0xe000e100
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	; 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f1c3 0307 	rsb	r3, r3, #7
 800102e:	2b04      	cmp	r3, #4
 8001030:	bf28      	it	cs
 8001032:	2304      	movcs	r3, #4
 8001034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3304      	adds	r3, #4
 800103a:	2b06      	cmp	r3, #6
 800103c:	d902      	bls.n	8001044 <NVIC_EncodePriority+0x30>
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3b03      	subs	r3, #3
 8001042:	e000      	b.n	8001046 <NVIC_EncodePriority+0x32>
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	f04f 32ff 	mov.w	r2, #4294967295
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43da      	mvns	r2, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	401a      	ands	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800105c:	f04f 31ff 	mov.w	r1, #4294967295
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	fa01 f303 	lsl.w	r3, r1, r3
 8001066:	43d9      	mvns	r1, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	4313      	orrs	r3, r2
         );
}
 800106e:	4618      	mov	r0, r3
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3b01      	subs	r3, #1
 8001088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800108c:	d301      	bcc.n	8001092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108e:	2301      	movs	r3, #1
 8001090:	e00f      	b.n	80010b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001092:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <SysTick_Config+0x40>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109a:	210f      	movs	r1, #15
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	f7ff ff8e 	bl	8000fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a4:	4b05      	ldr	r3, [pc, #20]	; (80010bc <SysTick_Config+0x40>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010aa:	4b04      	ldr	r3, [pc, #16]	; (80010bc <SysTick_Config+0x40>)
 80010ac:	2207      	movs	r2, #7
 80010ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	e000e010 	.word	0xe000e010

080010c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff29 	bl	8000f20 <__NVIC_SetPriorityGrouping>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010e4:	f7ff ff40 	bl	8000f68 <__NVIC_GetPriorityGrouping>
 80010e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	6978      	ldr	r0, [r7, #20]
 80010f0:	f7ff ff90 	bl	8001014 <NVIC_EncodePriority>
 80010f4:	4602      	mov	r2, r0
 80010f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff5f 	bl	8000fc0 <__NVIC_SetPriority>
}
 8001102:	bf00      	nop
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff33 	bl	8000f84 <__NVIC_EnableIRQ>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ffa4 	bl	800107c <SysTick_Config>
 8001134:	4603      	mov	r3, r0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800113e:	b480      	push	{r7}
 8001140:	b085      	sub	sp, #20
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d005      	beq.n	8001162 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2204      	movs	r2, #4
 800115a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	73fb      	strb	r3, [r7, #15]
 8001160:	e037      	b.n	80011d2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 020e 	bic.w	r2, r2, #14
 8001170:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800117c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001180:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f022 0201 	bic.w	r2, r2, #1
 8001190:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	f003 021f 	and.w	r2, r3, #31
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	2101      	movs	r1, #1
 80011a0:	fa01 f202 	lsl.w	r2, r1, r2
 80011a4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80011ae:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00c      	beq.n	80011d2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011c6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011d0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2201      	movs	r2, #1
 80011d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011f8:	2300      	movs	r3, #0
 80011fa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d00d      	beq.n	8001224 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2204      	movs	r2, #4
 800120c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2201      	movs	r2, #1
 8001212:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	73fb      	strb	r3, [r7, #15]
 8001222:	e047      	b.n	80012b4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 020e 	bic.w	r2, r2, #14
 8001232:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0201 	bic.w	r2, r2, #1
 8001242:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800124e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001252:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001258:	f003 021f 	and.w	r2, r3, #31
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	2101      	movs	r1, #1
 8001262:	fa01 f202 	lsl.w	r2, r1, r2
 8001266:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001270:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00c      	beq.n	8001294 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001284:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001288:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001292:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2201      	movs	r2, #1
 8001298:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	4798      	blx	r3
    }
  }
  return status;
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b087      	sub	sp, #28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012ce:	e15a      	b.n	8001586 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	2101      	movs	r1, #1
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	fa01 f303 	lsl.w	r3, r1, r3
 80012dc:	4013      	ands	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 814c 	beq.w	8001580 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d005      	beq.n	8001300 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d130      	bne.n	8001362 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2203      	movs	r2, #3
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001336:	2201      	movs	r2, #1
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	091b      	lsrs	r3, r3, #4
 800134c:	f003 0201 	and.w	r2, r3, #1
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 0303 	and.w	r3, r3, #3
 800136a:	2b03      	cmp	r3, #3
 800136c:	d017      	beq.n	800139e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	2203      	movs	r2, #3
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d123      	bne.n	80013f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	08da      	lsrs	r2, r3, #3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3208      	adds	r2, #8
 80013b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	220f      	movs	r2, #15
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	691a      	ldr	r2, [r3, #16]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	f003 0307 	and.w	r3, r3, #7
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	08da      	lsrs	r2, r3, #3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3208      	adds	r2, #8
 80013ec:	6939      	ldr	r1, [r7, #16]
 80013ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	2203      	movs	r2, #3
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 0203 	and.w	r2, r3, #3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 80a6 	beq.w	8001580 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001434:	4b5b      	ldr	r3, [pc, #364]	; (80015a4 <HAL_GPIO_Init+0x2e4>)
 8001436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001438:	4a5a      	ldr	r2, [pc, #360]	; (80015a4 <HAL_GPIO_Init+0x2e4>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6613      	str	r3, [r2, #96]	; 0x60
 8001440:	4b58      	ldr	r3, [pc, #352]	; (80015a4 <HAL_GPIO_Init+0x2e4>)
 8001442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800144c:	4a56      	ldr	r2, [pc, #344]	; (80015a8 <HAL_GPIO_Init+0x2e8>)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	089b      	lsrs	r3, r3, #2
 8001452:	3302      	adds	r3, #2
 8001454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001458:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	220f      	movs	r2, #15
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001476:	d01f      	beq.n	80014b8 <HAL_GPIO_Init+0x1f8>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a4c      	ldr	r2, [pc, #304]	; (80015ac <HAL_GPIO_Init+0x2ec>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d019      	beq.n	80014b4 <HAL_GPIO_Init+0x1f4>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a4b      	ldr	r2, [pc, #300]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d013      	beq.n	80014b0 <HAL_GPIO_Init+0x1f0>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a4a      	ldr	r2, [pc, #296]	; (80015b4 <HAL_GPIO_Init+0x2f4>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d00d      	beq.n	80014ac <HAL_GPIO_Init+0x1ec>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a49      	ldr	r2, [pc, #292]	; (80015b8 <HAL_GPIO_Init+0x2f8>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d007      	beq.n	80014a8 <HAL_GPIO_Init+0x1e8>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a48      	ldr	r2, [pc, #288]	; (80015bc <HAL_GPIO_Init+0x2fc>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d101      	bne.n	80014a4 <HAL_GPIO_Init+0x1e4>
 80014a0:	2305      	movs	r3, #5
 80014a2:	e00a      	b.n	80014ba <HAL_GPIO_Init+0x1fa>
 80014a4:	2306      	movs	r3, #6
 80014a6:	e008      	b.n	80014ba <HAL_GPIO_Init+0x1fa>
 80014a8:	2304      	movs	r3, #4
 80014aa:	e006      	b.n	80014ba <HAL_GPIO_Init+0x1fa>
 80014ac:	2303      	movs	r3, #3
 80014ae:	e004      	b.n	80014ba <HAL_GPIO_Init+0x1fa>
 80014b0:	2302      	movs	r3, #2
 80014b2:	e002      	b.n	80014ba <HAL_GPIO_Init+0x1fa>
 80014b4:	2301      	movs	r3, #1
 80014b6:	e000      	b.n	80014ba <HAL_GPIO_Init+0x1fa>
 80014b8:	2300      	movs	r3, #0
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	f002 0203 	and.w	r2, r2, #3
 80014c0:	0092      	lsls	r2, r2, #2
 80014c2:	4093      	lsls	r3, r2
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014ca:	4937      	ldr	r1, [pc, #220]	; (80015a8 <HAL_GPIO_Init+0x2e8>)
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	089b      	lsrs	r3, r3, #2
 80014d0:	3302      	adds	r3, #2
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014d8:	4b39      	ldr	r3, [pc, #228]	; (80015c0 <HAL_GPIO_Init+0x300>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014fc:	4a30      	ldr	r2, [pc, #192]	; (80015c0 <HAL_GPIO_Init+0x300>)
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001502:	4b2f      	ldr	r3, [pc, #188]	; (80015c0 <HAL_GPIO_Init+0x300>)
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	43db      	mvns	r3, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4013      	ands	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4313      	orrs	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001526:	4a26      	ldr	r2, [pc, #152]	; (80015c0 <HAL_GPIO_Init+0x300>)
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800152c:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <HAL_GPIO_Init+0x300>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	43db      	mvns	r3, r3
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4013      	ands	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001550:	4a1b      	ldr	r2, [pc, #108]	; (80015c0 <HAL_GPIO_Init+0x300>)
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001556:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <HAL_GPIO_Init+0x300>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	43db      	mvns	r3, r3
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4013      	ands	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4313      	orrs	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800157a:	4a11      	ldr	r2, [pc, #68]	; (80015c0 <HAL_GPIO_Init+0x300>)
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	3301      	adds	r3, #1
 8001584:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	fa22 f303 	lsr.w	r3, r2, r3
 8001590:	2b00      	cmp	r3, #0
 8001592:	f47f ae9d 	bne.w	80012d0 <HAL_GPIO_Init+0x10>
  }
}
 8001596:	bf00      	nop
 8001598:	bf00      	nop
 800159a:	371c      	adds	r7, #28
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40010000 	.word	0x40010000
 80015ac:	48000400 	.word	0x48000400
 80015b0:	48000800 	.word	0x48000800
 80015b4:	48000c00 	.word	0x48000c00
 80015b8:	48001000 	.word	0x48001000
 80015bc:	48001400 	.word	0x48001400
 80015c0:	40010400 	.word	0x40010400

080015c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	807b      	strh	r3, [r7, #2]
 80015d0:	4613      	mov	r3, r2
 80015d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015d4:	787b      	ldrb	r3, [r7, #1]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015da:	887a      	ldrh	r2, [r7, #2]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015e0:	e002      	b.n	80015e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015e2:	887a      	ldrh	r2, [r7, #2]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d141      	bne.n	8001686 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001602:	4b4b      	ldr	r3, [pc, #300]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800160a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800160e:	d131      	bne.n	8001674 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001610:	4b47      	ldr	r3, [pc, #284]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001616:	4a46      	ldr	r2, [pc, #280]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800161c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001620:	4b43      	ldr	r3, [pc, #268]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001628:	4a41      	ldr	r2, [pc, #260]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800162a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800162e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001630:	4b40      	ldr	r3, [pc, #256]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2232      	movs	r2, #50	; 0x32
 8001636:	fb02 f303 	mul.w	r3, r2, r3
 800163a:	4a3f      	ldr	r2, [pc, #252]	; (8001738 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800163c:	fba2 2303 	umull	r2, r3, r2, r3
 8001640:	0c9b      	lsrs	r3, r3, #18
 8001642:	3301      	adds	r3, #1
 8001644:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001646:	e002      	b.n	800164e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	3b01      	subs	r3, #1
 800164c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800164e:	4b38      	ldr	r3, [pc, #224]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800165a:	d102      	bne.n	8001662 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f2      	bne.n	8001648 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001662:	4b33      	ldr	r3, [pc, #204]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800166a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800166e:	d158      	bne.n	8001722 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e057      	b.n	8001724 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001674:	4b2e      	ldr	r3, [pc, #184]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800167a:	4a2d      	ldr	r2, [pc, #180]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001680:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001684:	e04d      	b.n	8001722 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800168c:	d141      	bne.n	8001712 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800168e:	4b28      	ldr	r3, [pc, #160]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800169a:	d131      	bne.n	8001700 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800169c:	4b24      	ldr	r3, [pc, #144]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800169e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016a2:	4a23      	ldr	r2, [pc, #140]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ac:	4b20      	ldr	r3, [pc, #128]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016b4:	4a1e      	ldr	r2, [pc, #120]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016bc:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2232      	movs	r2, #50	; 0x32
 80016c2:	fb02 f303 	mul.w	r3, r2, r3
 80016c6:	4a1c      	ldr	r2, [pc, #112]	; (8001738 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016c8:	fba2 2303 	umull	r2, r3, r2, r3
 80016cc:	0c9b      	lsrs	r3, r3, #18
 80016ce:	3301      	adds	r3, #1
 80016d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016d2:	e002      	b.n	80016da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016e6:	d102      	bne.n	80016ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f2      	bne.n	80016d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016fa:	d112      	bne.n	8001722 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e011      	b.n	8001724 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001710:	e007      	b.n	8001722 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001712:	4b07      	ldr	r3, [pc, #28]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800171a:	4a05      	ldr	r2, [pc, #20]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800171c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001720:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	40007000 	.word	0x40007000
 8001734:	20000000 	.word	0x20000000
 8001738:	431bde83 	.word	0x431bde83

0800173c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e306      	b.n	8001d5c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d075      	beq.n	8001846 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800175a:	4b97      	ldr	r3, [pc, #604]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 030c 	and.w	r3, r3, #12
 8001762:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001764:	4b94      	ldr	r3, [pc, #592]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	2b0c      	cmp	r3, #12
 8001772:	d102      	bne.n	800177a <HAL_RCC_OscConfig+0x3e>
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	2b03      	cmp	r3, #3
 8001778:	d002      	beq.n	8001780 <HAL_RCC_OscConfig+0x44>
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	2b08      	cmp	r3, #8
 800177e:	d10b      	bne.n	8001798 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001780:	4b8d      	ldr	r3, [pc, #564]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d05b      	beq.n	8001844 <HAL_RCC_OscConfig+0x108>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d157      	bne.n	8001844 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e2e1      	b.n	8001d5c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a0:	d106      	bne.n	80017b0 <HAL_RCC_OscConfig+0x74>
 80017a2:	4b85      	ldr	r3, [pc, #532]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a84      	ldr	r2, [pc, #528]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 80017a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	e01d      	b.n	80017ec <HAL_RCC_OscConfig+0xb0>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017b8:	d10c      	bne.n	80017d4 <HAL_RCC_OscConfig+0x98>
 80017ba:	4b7f      	ldr	r3, [pc, #508]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a7e      	ldr	r2, [pc, #504]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 80017c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	4b7c      	ldr	r3, [pc, #496]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a7b      	ldr	r2, [pc, #492]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 80017cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	e00b      	b.n	80017ec <HAL_RCC_OscConfig+0xb0>
 80017d4:	4b78      	ldr	r3, [pc, #480]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a77      	ldr	r2, [pc, #476]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 80017da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	4b75      	ldr	r3, [pc, #468]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a74      	ldr	r2, [pc, #464]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 80017e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d013      	beq.n	800181c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f4:	f7ff fb66 	bl	8000ec4 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017fc:	f7ff fb62 	bl	8000ec4 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b64      	cmp	r3, #100	; 0x64
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e2a6      	b.n	8001d5c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800180e:	4b6a      	ldr	r3, [pc, #424]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0f0      	beq.n	80017fc <HAL_RCC_OscConfig+0xc0>
 800181a:	e014      	b.n	8001846 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181c:	f7ff fb52 	bl	8000ec4 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001824:	f7ff fb4e 	bl	8000ec4 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b64      	cmp	r3, #100	; 0x64
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e292      	b.n	8001d5c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001836:	4b60      	ldr	r3, [pc, #384]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0xe8>
 8001842:	e000      	b.n	8001846 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d075      	beq.n	800193e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001852:	4b59      	ldr	r3, [pc, #356]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 030c 	and.w	r3, r3, #12
 800185a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800185c:	4b56      	ldr	r3, [pc, #344]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	2b0c      	cmp	r3, #12
 800186a:	d102      	bne.n	8001872 <HAL_RCC_OscConfig+0x136>
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d002      	beq.n	8001878 <HAL_RCC_OscConfig+0x13c>
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	2b04      	cmp	r3, #4
 8001876:	d11f      	bne.n	80018b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001878:	4b4f      	ldr	r3, [pc, #316]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <HAL_RCC_OscConfig+0x154>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e265      	b.n	8001d5c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001890:	4b49      	ldr	r3, [pc, #292]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	061b      	lsls	r3, r3, #24
 800189e:	4946      	ldr	r1, [pc, #280]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80018a4:	4b45      	ldr	r3, [pc, #276]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fabf 	bl	8000e2c <HAL_InitTick>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d043      	beq.n	800193c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e251      	b.n	8001d5c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d023      	beq.n	8001908 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c0:	4b3d      	ldr	r3, [pc, #244]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a3c      	ldr	r2, [pc, #240]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 80018c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018cc:	f7ff fafa 	bl	8000ec4 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d4:	f7ff faf6 	bl	8000ec4 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e23a      	b.n	8001d5c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018e6:	4b34      	ldr	r3, [pc, #208]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f2:	4b31      	ldr	r3, [pc, #196]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	061b      	lsls	r3, r3, #24
 8001900:	492d      	ldr	r1, [pc, #180]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 8001902:	4313      	orrs	r3, r2
 8001904:	604b      	str	r3, [r1, #4]
 8001906:	e01a      	b.n	800193e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001908:	4b2b      	ldr	r3, [pc, #172]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a2a      	ldr	r2, [pc, #168]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 800190e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001914:	f7ff fad6 	bl	8000ec4 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800191c:	f7ff fad2 	bl	8000ec4 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e216      	b.n	8001d5c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800192e:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f0      	bne.n	800191c <HAL_RCC_OscConfig+0x1e0>
 800193a:	e000      	b.n	800193e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800193c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d041      	beq.n	80019ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d01c      	beq.n	800198c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001952:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 8001954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001958:	4a17      	ldr	r2, [pc, #92]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001962:	f7ff faaf 	bl	8000ec4 <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800196a:	f7ff faab 	bl	8000ec4 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e1ef      	b.n	8001d5c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800197c:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 800197e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0ef      	beq.n	800196a <HAL_RCC_OscConfig+0x22e>
 800198a:	e020      	b.n	80019ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800198c:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 800198e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001992:	4a09      	ldr	r2, [pc, #36]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199c:	f7ff fa92 	bl	8000ec4 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019a2:	e00d      	b.n	80019c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a4:	f7ff fa8e 	bl	8000ec4 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d906      	bls.n	80019c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e1d2      	b.n	8001d5c <HAL_RCC_OscConfig+0x620>
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000
 80019bc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019c0:	4b8c      	ldr	r3, [pc, #560]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 80019c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1ea      	bne.n	80019a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0304 	and.w	r3, r3, #4
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 80a6 	beq.w	8001b28 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019dc:	2300      	movs	r3, #0
 80019de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019e0:	4b84      	ldr	r3, [pc, #528]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 80019e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_RCC_OscConfig+0x2b4>
 80019ec:	2301      	movs	r3, #1
 80019ee:	e000      	b.n	80019f2 <HAL_RCC_OscConfig+0x2b6>
 80019f0:	2300      	movs	r3, #0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00d      	beq.n	8001a12 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	4b7f      	ldr	r3, [pc, #508]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 80019f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fa:	4a7e      	ldr	r2, [pc, #504]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a00:	6593      	str	r3, [r2, #88]	; 0x58
 8001a02:	4b7c      	ldr	r3, [pc, #496]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a12:	4b79      	ldr	r3, [pc, #484]	; (8001bf8 <HAL_RCC_OscConfig+0x4bc>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d118      	bne.n	8001a50 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a1e:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <HAL_RCC_OscConfig+0x4bc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a75      	ldr	r2, [pc, #468]	; (8001bf8 <HAL_RCC_OscConfig+0x4bc>)
 8001a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a2a:	f7ff fa4b 	bl	8000ec4 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a32:	f7ff fa47 	bl	8000ec4 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e18b      	b.n	8001d5c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a44:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <HAL_RCC_OscConfig+0x4bc>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d108      	bne.n	8001a6a <HAL_RCC_OscConfig+0x32e>
 8001a58:	4b66      	ldr	r3, [pc, #408]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a5e:	4a65      	ldr	r2, [pc, #404]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a68:	e024      	b.n	8001ab4 <HAL_RCC_OscConfig+0x378>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2b05      	cmp	r3, #5
 8001a70:	d110      	bne.n	8001a94 <HAL_RCC_OscConfig+0x358>
 8001a72:	4b60      	ldr	r3, [pc, #384]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a78:	4a5e      	ldr	r2, [pc, #376]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001a7a:	f043 0304 	orr.w	r3, r3, #4
 8001a7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a82:	4b5c      	ldr	r3, [pc, #368]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a88:	4a5a      	ldr	r2, [pc, #360]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a92:	e00f      	b.n	8001ab4 <HAL_RCC_OscConfig+0x378>
 8001a94:	4b57      	ldr	r3, [pc, #348]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9a:	4a56      	ldr	r2, [pc, #344]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001a9c:	f023 0301 	bic.w	r3, r3, #1
 8001aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aa4:	4b53      	ldr	r3, [pc, #332]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aaa:	4a52      	ldr	r2, [pc, #328]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001aac:	f023 0304 	bic.w	r3, r3, #4
 8001ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d016      	beq.n	8001aea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001abc:	f7ff fa02 	bl	8000ec4 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ac2:	e00a      	b.n	8001ada <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac4:	f7ff f9fe 	bl	8000ec4 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e140      	b.n	8001d5c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ada:	4b46      	ldr	r3, [pc, #280]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0ed      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x388>
 8001ae8:	e015      	b.n	8001b16 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aea:	f7ff f9eb 	bl	8000ec4 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001af0:	e00a      	b.n	8001b08 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af2:	f7ff f9e7 	bl	8000ec4 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e129      	b.n	8001d5c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b08:	4b3a      	ldr	r3, [pc, #232]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1ed      	bne.n	8001af2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b16:	7ffb      	ldrb	r3, [r7, #31]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d105      	bne.n	8001b28 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b1c:	4b35      	ldr	r3, [pc, #212]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b20:	4a34      	ldr	r2, [pc, #208]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001b22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b26:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0320 	and.w	r3, r3, #32
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d03c      	beq.n	8001bae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d01c      	beq.n	8001b76 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b3c:	4b2d      	ldr	r3, [pc, #180]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001b3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b42:	4a2c      	ldr	r2, [pc, #176]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4c:	f7ff f9ba 	bl	8000ec4 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b54:	f7ff f9b6 	bl	8000ec4 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e0fa      	b.n	8001d5c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b66:	4b23      	ldr	r3, [pc, #140]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001b68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0ef      	beq.n	8001b54 <HAL_RCC_OscConfig+0x418>
 8001b74:	e01b      	b.n	8001bae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b76:	4b1f      	ldr	r3, [pc, #124]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001b78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b7c:	4a1d      	ldr	r2, [pc, #116]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001b7e:	f023 0301 	bic.w	r3, r3, #1
 8001b82:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b86:	f7ff f99d 	bl	8000ec4 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b8e:	f7ff f999 	bl	8000ec4 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e0dd      	b.n	8001d5c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ba0:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001ba2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1ef      	bne.n	8001b8e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 80d1 	beq.w	8001d5a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bb8:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 030c 	and.w	r3, r3, #12
 8001bc0:	2b0c      	cmp	r3, #12
 8001bc2:	f000 808b 	beq.w	8001cdc <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d15e      	bne.n	8001c8c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a08      	ldr	r2, [pc, #32]	; (8001bf4 <HAL_RCC_OscConfig+0x4b8>)
 8001bd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bda:	f7ff f973 	bl	8000ec4 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be0:	e00c      	b.n	8001bfc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be2:	f7ff f96f 	bl	8000ec4 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d905      	bls.n	8001bfc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e0b3      	b.n	8001d5c <HAL_RCC_OscConfig+0x620>
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bfc:	4b59      	ldr	r3, [pc, #356]	; (8001d64 <HAL_RCC_OscConfig+0x628>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1ec      	bne.n	8001be2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c08:	4b56      	ldr	r3, [pc, #344]	; (8001d64 <HAL_RCC_OscConfig+0x628>)
 8001c0a:	68da      	ldr	r2, [r3, #12]
 8001c0c:	4b56      	ldr	r3, [pc, #344]	; (8001d68 <HAL_RCC_OscConfig+0x62c>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6a11      	ldr	r1, [r2, #32]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c18:	3a01      	subs	r2, #1
 8001c1a:	0112      	lsls	r2, r2, #4
 8001c1c:	4311      	orrs	r1, r2
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001c22:	0212      	lsls	r2, r2, #8
 8001c24:	4311      	orrs	r1, r2
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c2a:	0852      	lsrs	r2, r2, #1
 8001c2c:	3a01      	subs	r2, #1
 8001c2e:	0552      	lsls	r2, r2, #21
 8001c30:	4311      	orrs	r1, r2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c36:	0852      	lsrs	r2, r2, #1
 8001c38:	3a01      	subs	r2, #1
 8001c3a:	0652      	lsls	r2, r2, #25
 8001c3c:	4311      	orrs	r1, r2
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c42:	06d2      	lsls	r2, r2, #27
 8001c44:	430a      	orrs	r2, r1
 8001c46:	4947      	ldr	r1, [pc, #284]	; (8001d64 <HAL_RCC_OscConfig+0x628>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c4c:	4b45      	ldr	r3, [pc, #276]	; (8001d64 <HAL_RCC_OscConfig+0x628>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a44      	ldr	r2, [pc, #272]	; (8001d64 <HAL_RCC_OscConfig+0x628>)
 8001c52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c56:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c58:	4b42      	ldr	r3, [pc, #264]	; (8001d64 <HAL_RCC_OscConfig+0x628>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	4a41      	ldr	r2, [pc, #260]	; (8001d64 <HAL_RCC_OscConfig+0x628>)
 8001c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c62:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c64:	f7ff f92e 	bl	8000ec4 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6c:	f7ff f92a 	bl	8000ec4 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e06e      	b.n	8001d5c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c7e:	4b39      	ldr	r3, [pc, #228]	; (8001d64 <HAL_RCC_OscConfig+0x628>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x530>
 8001c8a:	e066      	b.n	8001d5a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8c:	4b35      	ldr	r3, [pc, #212]	; (8001d64 <HAL_RCC_OscConfig+0x628>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a34      	ldr	r2, [pc, #208]	; (8001d64 <HAL_RCC_OscConfig+0x628>)
 8001c92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c96:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001c98:	4b32      	ldr	r3, [pc, #200]	; (8001d64 <HAL_RCC_OscConfig+0x628>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	4a31      	ldr	r2, [pc, #196]	; (8001d64 <HAL_RCC_OscConfig+0x628>)
 8001c9e:	f023 0303 	bic.w	r3, r3, #3
 8001ca2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001ca4:	4b2f      	ldr	r3, [pc, #188]	; (8001d64 <HAL_RCC_OscConfig+0x628>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	4a2e      	ldr	r2, [pc, #184]	; (8001d64 <HAL_RCC_OscConfig+0x628>)
 8001caa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cb2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb4:	f7ff f906 	bl	8000ec4 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbc:	f7ff f902 	bl	8000ec4 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e046      	b.n	8001d5c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cce:	4b25      	ldr	r3, [pc, #148]	; (8001d64 <HAL_RCC_OscConfig+0x628>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0x580>
 8001cda:	e03e      	b.n	8001d5a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e039      	b.n	8001d5c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001ce8:	4b1e      	ldr	r3, [pc, #120]	; (8001d64 <HAL_RCC_OscConfig+0x628>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f003 0203 	and.w	r2, r3, #3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d12c      	bne.n	8001d56 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	3b01      	subs	r3, #1
 8001d08:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d123      	bne.n	8001d56 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d18:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d11b      	bne.n	8001d56 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d28:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d113      	bne.n	8001d56 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	085b      	lsrs	r3, r3, #1
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d109      	bne.n	8001d56 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d4c:	085b      	lsrs	r3, r3, #1
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d001      	beq.n	8001d5a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3720      	adds	r7, #32
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40021000 	.word	0x40021000
 8001d68:	019f800c 	.word	0x019f800c

08001d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e11e      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d84:	4b91      	ldr	r3, [pc, #580]	; (8001fcc <HAL_RCC_ClockConfig+0x260>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 030f 	and.w	r3, r3, #15
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d910      	bls.n	8001db4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d92:	4b8e      	ldr	r3, [pc, #568]	; (8001fcc <HAL_RCC_ClockConfig+0x260>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 020f 	bic.w	r2, r3, #15
 8001d9a:	498c      	ldr	r1, [pc, #560]	; (8001fcc <HAL_RCC_ClockConfig+0x260>)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da2:	4b8a      	ldr	r3, [pc, #552]	; (8001fcc <HAL_RCC_ClockConfig+0x260>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d001      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e106      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d073      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	d129      	bne.n	8001e1c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc8:	4b81      	ldr	r3, [pc, #516]	; (8001fd0 <HAL_RCC_ClockConfig+0x264>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0f4      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001dd8:	f000 f99e 	bl	8002118 <RCC_GetSysClockFreqFromPLLSource>
 8001ddc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4a7c      	ldr	r2, [pc, #496]	; (8001fd4 <HAL_RCC_ClockConfig+0x268>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d93f      	bls.n	8001e66 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001de6:	4b7a      	ldr	r3, [pc, #488]	; (8001fd0 <HAL_RCC_ClockConfig+0x264>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d009      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d033      	beq.n	8001e66 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d12f      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e06:	4b72      	ldr	r3, [pc, #456]	; (8001fd0 <HAL_RCC_ClockConfig+0x264>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e0e:	4a70      	ldr	r2, [pc, #448]	; (8001fd0 <HAL_RCC_ClockConfig+0x264>)
 8001e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e14:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e16:	2380      	movs	r3, #128	; 0x80
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	e024      	b.n	8001e66 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d107      	bne.n	8001e34 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e24:	4b6a      	ldr	r3, [pc, #424]	; (8001fd0 <HAL_RCC_ClockConfig+0x264>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d109      	bne.n	8001e44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e0c6      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e34:	4b66      	ldr	r3, [pc, #408]	; (8001fd0 <HAL_RCC_ClockConfig+0x264>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e0be      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001e44:	f000 f8ce 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 8001e48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4a61      	ldr	r2, [pc, #388]	; (8001fd4 <HAL_RCC_ClockConfig+0x268>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d909      	bls.n	8001e66 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e52:	4b5f      	ldr	r3, [pc, #380]	; (8001fd0 <HAL_RCC_ClockConfig+0x264>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e5a:	4a5d      	ldr	r2, [pc, #372]	; (8001fd0 <HAL_RCC_ClockConfig+0x264>)
 8001e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e60:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001e62:	2380      	movs	r3, #128	; 0x80
 8001e64:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e66:	4b5a      	ldr	r3, [pc, #360]	; (8001fd0 <HAL_RCC_ClockConfig+0x264>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f023 0203 	bic.w	r2, r3, #3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	4957      	ldr	r1, [pc, #348]	; (8001fd0 <HAL_RCC_ClockConfig+0x264>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e78:	f7ff f824 	bl	8000ec4 <HAL_GetTick>
 8001e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7e:	e00a      	b.n	8001e96 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e80:	f7ff f820 	bl	8000ec4 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e095      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e96:	4b4e      	ldr	r3, [pc, #312]	; (8001fd0 <HAL_RCC_ClockConfig+0x264>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 020c 	and.w	r2, r3, #12
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d1eb      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d023      	beq.n	8001efc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d005      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ec0:	4b43      	ldr	r3, [pc, #268]	; (8001fd0 <HAL_RCC_ClockConfig+0x264>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	4a42      	ldr	r2, [pc, #264]	; (8001fd0 <HAL_RCC_ClockConfig+0x264>)
 8001ec6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d007      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001ed8:	4b3d      	ldr	r3, [pc, #244]	; (8001fd0 <HAL_RCC_ClockConfig+0x264>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001ee0:	4a3b      	ldr	r2, [pc, #236]	; (8001fd0 <HAL_RCC_ClockConfig+0x264>)
 8001ee2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ee6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee8:	4b39      	ldr	r3, [pc, #228]	; (8001fd0 <HAL_RCC_ClockConfig+0x264>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	4936      	ldr	r1, [pc, #216]	; (8001fd0 <HAL_RCC_ClockConfig+0x264>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	608b      	str	r3, [r1, #8]
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	2b80      	cmp	r3, #128	; 0x80
 8001f00:	d105      	bne.n	8001f0e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001f02:	4b33      	ldr	r3, [pc, #204]	; (8001fd0 <HAL_RCC_ClockConfig+0x264>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	4a32      	ldr	r2, [pc, #200]	; (8001fd0 <HAL_RCC_ClockConfig+0x264>)
 8001f08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f0c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f0e:	4b2f      	ldr	r3, [pc, #188]	; (8001fcc <HAL_RCC_ClockConfig+0x260>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d21d      	bcs.n	8001f58 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1c:	4b2b      	ldr	r3, [pc, #172]	; (8001fcc <HAL_RCC_ClockConfig+0x260>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f023 020f 	bic.w	r2, r3, #15
 8001f24:	4929      	ldr	r1, [pc, #164]	; (8001fcc <HAL_RCC_ClockConfig+0x260>)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f2c:	f7fe ffca 	bl	8000ec4 <HAL_GetTick>
 8001f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f32:	e00a      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f34:	f7fe ffc6 	bl	8000ec4 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e03b      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4a:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <HAL_RCC_ClockConfig+0x260>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d1ed      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d008      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f64:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <HAL_RCC_ClockConfig+0x264>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	4917      	ldr	r1, [pc, #92]	; (8001fd0 <HAL_RCC_ClockConfig+0x264>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d009      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <HAL_RCC_ClockConfig+0x264>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	490f      	ldr	r1, [pc, #60]	; (8001fd0 <HAL_RCC_ClockConfig+0x264>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f96:	f000 f825 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <HAL_RCC_ClockConfig+0x264>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	490c      	ldr	r1, [pc, #48]	; (8001fd8 <HAL_RCC_ClockConfig+0x26c>)
 8001fa8:	5ccb      	ldrb	r3, [r1, r3]
 8001faa:	f003 031f 	and.w	r3, r3, #31
 8001fae:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <HAL_RCC_ClockConfig+0x270>)
 8001fb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <HAL_RCC_ClockConfig+0x274>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe ff36 	bl	8000e2c <HAL_InitTick>
 8001fc0:	4603      	mov	r3, r0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40022000 	.word	0x40022000
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	04c4b400 	.word	0x04c4b400
 8001fd8:	08005a6c 	.word	0x08005a6c
 8001fdc:	20000000 	.word	0x20000000
 8001fe0:	20000004 	.word	0x20000004

08001fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b087      	sub	sp, #28
 8001fe8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001fea:	4b2c      	ldr	r3, [pc, #176]	; (800209c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 030c 	and.w	r3, r3, #12
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d102      	bne.n	8001ffc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ff6:	4b2a      	ldr	r3, [pc, #168]	; (80020a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	e047      	b.n	800208c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ffc:	4b27      	ldr	r3, [pc, #156]	; (800209c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 030c 	and.w	r3, r3, #12
 8002004:	2b08      	cmp	r3, #8
 8002006:	d102      	bne.n	800200e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002008:	4b26      	ldr	r3, [pc, #152]	; (80020a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	e03e      	b.n	800208c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800200e:	4b23      	ldr	r3, [pc, #140]	; (800209c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	2b0c      	cmp	r3, #12
 8002018:	d136      	bne.n	8002088 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800201a:	4b20      	ldr	r3, [pc, #128]	; (800209c <HAL_RCC_GetSysClockFreq+0xb8>)
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002024:	4b1d      	ldr	r3, [pc, #116]	; (800209c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	091b      	lsrs	r3, r3, #4
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	3301      	adds	r3, #1
 8002030:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2b03      	cmp	r3, #3
 8002036:	d10c      	bne.n	8002052 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002038:	4a1a      	ldr	r2, [pc, #104]	; (80020a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002040:	4a16      	ldr	r2, [pc, #88]	; (800209c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002042:	68d2      	ldr	r2, [r2, #12]
 8002044:	0a12      	lsrs	r2, r2, #8
 8002046:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800204a:	fb02 f303 	mul.w	r3, r2, r3
 800204e:	617b      	str	r3, [r7, #20]
      break;
 8002050:	e00c      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002052:	4a13      	ldr	r2, [pc, #76]	; (80020a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	fbb2 f3f3 	udiv	r3, r2, r3
 800205a:	4a10      	ldr	r2, [pc, #64]	; (800209c <HAL_RCC_GetSysClockFreq+0xb8>)
 800205c:	68d2      	ldr	r2, [r2, #12]
 800205e:	0a12      	lsrs	r2, r2, #8
 8002060:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002064:	fb02 f303 	mul.w	r3, r2, r3
 8002068:	617b      	str	r3, [r7, #20]
      break;
 800206a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <HAL_RCC_GetSysClockFreq+0xb8>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	0e5b      	lsrs	r3, r3, #25
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	3301      	adds	r3, #1
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	fbb2 f3f3 	udiv	r3, r2, r3
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	e001      	b.n	800208c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800208c:	693b      	ldr	r3, [r7, #16]
}
 800208e:	4618      	mov	r0, r3
 8002090:	371c      	adds	r7, #28
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40021000 	.word	0x40021000
 80020a0:	00f42400 	.word	0x00f42400
 80020a4:	007a1200 	.word	0x007a1200

080020a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020ac:	4b03      	ldr	r3, [pc, #12]	; (80020bc <HAL_RCC_GetHCLKFreq+0x14>)
 80020ae:	681b      	ldr	r3, [r3, #0]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20000000 	.word	0x20000000

080020c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020c4:	f7ff fff0 	bl	80020a8 <HAL_RCC_GetHCLKFreq>
 80020c8:	4602      	mov	r2, r0
 80020ca:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	0a1b      	lsrs	r3, r3, #8
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	4904      	ldr	r1, [pc, #16]	; (80020e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020d6:	5ccb      	ldrb	r3, [r1, r3]
 80020d8:	f003 031f 	and.w	r3, r3, #31
 80020dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40021000 	.word	0x40021000
 80020e8:	08005a7c 	.word	0x08005a7c

080020ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020f0:	f7ff ffda 	bl	80020a8 <HAL_RCC_GetHCLKFreq>
 80020f4:	4602      	mov	r2, r0
 80020f6:	4b06      	ldr	r3, [pc, #24]	; (8002110 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	0adb      	lsrs	r3, r3, #11
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	4904      	ldr	r1, [pc, #16]	; (8002114 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002102:	5ccb      	ldrb	r3, [r1, r3]
 8002104:	f003 031f 	and.w	r3, r3, #31
 8002108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800210c:	4618      	mov	r0, r3
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40021000 	.word	0x40021000
 8002114:	08005a7c 	.word	0x08005a7c

08002118 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002118:	b480      	push	{r7}
 800211a:	b087      	sub	sp, #28
 800211c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800211e:	4b1e      	ldr	r3, [pc, #120]	; (8002198 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002128:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	091b      	lsrs	r3, r3, #4
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	3301      	adds	r3, #1
 8002134:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	2b03      	cmp	r3, #3
 800213a:	d10c      	bne.n	8002156 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800213c:	4a17      	ldr	r2, [pc, #92]	; (800219c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	fbb2 f3f3 	udiv	r3, r2, r3
 8002144:	4a14      	ldr	r2, [pc, #80]	; (8002198 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002146:	68d2      	ldr	r2, [r2, #12]
 8002148:	0a12      	lsrs	r2, r2, #8
 800214a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800214e:	fb02 f303 	mul.w	r3, r2, r3
 8002152:	617b      	str	r3, [r7, #20]
    break;
 8002154:	e00c      	b.n	8002170 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002156:	4a12      	ldr	r2, [pc, #72]	; (80021a0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	fbb2 f3f3 	udiv	r3, r2, r3
 800215e:	4a0e      	ldr	r2, [pc, #56]	; (8002198 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002160:	68d2      	ldr	r2, [r2, #12]
 8002162:	0a12      	lsrs	r2, r2, #8
 8002164:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002168:	fb02 f303 	mul.w	r3, r2, r3
 800216c:	617b      	str	r3, [r7, #20]
    break;
 800216e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002170:	4b09      	ldr	r3, [pc, #36]	; (8002198 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	0e5b      	lsrs	r3, r3, #25
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	3301      	adds	r3, #1
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	fbb2 f3f3 	udiv	r3, r2, r3
 8002188:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800218a:	687b      	ldr	r3, [r7, #4]
}
 800218c:	4618      	mov	r0, r3
 800218e:	371c      	adds	r7, #28
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	40021000 	.word	0x40021000
 800219c:	007a1200 	.word	0x007a1200
 80021a0:	00f42400 	.word	0x00f42400

080021a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021ac:	2300      	movs	r3, #0
 80021ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021b0:	2300      	movs	r3, #0
 80021b2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 8098 	beq.w	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021c2:	2300      	movs	r3, #0
 80021c4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c6:	4b43      	ldr	r3, [pc, #268]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10d      	bne.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d2:	4b40      	ldr	r3, [pc, #256]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d6:	4a3f      	ldr	r2, [pc, #252]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021dc:	6593      	str	r3, [r2, #88]	; 0x58
 80021de:	4b3d      	ldr	r3, [pc, #244]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ea:	2301      	movs	r3, #1
 80021ec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021ee:	4b3a      	ldr	r3, [pc, #232]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a39      	ldr	r2, [pc, #228]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021fa:	f7fe fe63 	bl	8000ec4 <HAL_GetTick>
 80021fe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002200:	e009      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002202:	f7fe fe5f 	bl	8000ec4 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d902      	bls.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	74fb      	strb	r3, [r7, #19]
        break;
 8002214:	e005      	b.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002216:	4b30      	ldr	r3, [pc, #192]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0ef      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002222:	7cfb      	ldrb	r3, [r7, #19]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d159      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002228:	4b2a      	ldr	r3, [pc, #168]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800222a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002232:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d01e      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	429a      	cmp	r2, r3
 8002242:	d019      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002244:	4b23      	ldr	r3, [pc, #140]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800224e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002250:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002256:	4a1f      	ldr	r2, [pc, #124]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800225c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002260:	4b1c      	ldr	r3, [pc, #112]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002266:	4a1b      	ldr	r2, [pc, #108]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002268:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800226c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002270:	4a18      	ldr	r2, [pc, #96]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d016      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002282:	f7fe fe1f 	bl	8000ec4 <HAL_GetTick>
 8002286:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002288:	e00b      	b.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228a:	f7fe fe1b 	bl	8000ec4 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	f241 3288 	movw	r2, #5000	; 0x1388
 8002298:	4293      	cmp	r3, r2
 800229a:	d902      	bls.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	74fb      	strb	r3, [r7, #19]
            break;
 80022a0:	e006      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022a2:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0ec      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80022b0:	7cfb      	ldrb	r3, [r7, #19]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10b      	bne.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022b6:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022c4:	4903      	ldr	r1, [pc, #12]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80022cc:	e008      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022ce:	7cfb      	ldrb	r3, [r7, #19]
 80022d0:	74bb      	strb	r3, [r7, #18]
 80022d2:	e005      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022dc:	7cfb      	ldrb	r3, [r7, #19]
 80022de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022e0:	7c7b      	ldrb	r3, [r7, #17]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d105      	bne.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e6:	4ba7      	ldr	r3, [pc, #668]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ea:	4aa6      	ldr	r2, [pc, #664]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022fe:	4ba1      	ldr	r3, [pc, #644]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002304:	f023 0203 	bic.w	r2, r3, #3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	499d      	ldr	r1, [pc, #628]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00a      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002320:	4b98      	ldr	r3, [pc, #608]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002326:	f023 020c 	bic.w	r2, r3, #12
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	4995      	ldr	r1, [pc, #596]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0304 	and.w	r3, r3, #4
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00a      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002342:	4b90      	ldr	r3, [pc, #576]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002348:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	498c      	ldr	r1, [pc, #560]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00a      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002364:	4b87      	ldr	r3, [pc, #540]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	4984      	ldr	r1, [pc, #528]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00a      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002386:	4b7f      	ldr	r3, [pc, #508]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	497b      	ldr	r1, [pc, #492]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0320 	and.w	r3, r3, #32
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00a      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023a8:	4b76      	ldr	r3, [pc, #472]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	4973      	ldr	r1, [pc, #460]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00a      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023ca:	4b6e      	ldr	r3, [pc, #440]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	496a      	ldr	r1, [pc, #424]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00a      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023ec:	4b65      	ldr	r3, [pc, #404]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	4962      	ldr	r1, [pc, #392]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00a      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800240e:	4b5d      	ldr	r3, [pc, #372]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002414:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	4959      	ldr	r1, [pc, #356]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800241e:	4313      	orrs	r3, r2
 8002420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00a      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002430:	4b54      	ldr	r3, [pc, #336]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002432:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002436:	f023 0203 	bic.w	r2, r3, #3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243e:	4951      	ldr	r1, [pc, #324]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002440:	4313      	orrs	r3, r2
 8002442:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00a      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002452:	4b4c      	ldr	r3, [pc, #304]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002458:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002460:	4948      	ldr	r1, [pc, #288]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002462:	4313      	orrs	r3, r2
 8002464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002470:	2b00      	cmp	r3, #0
 8002472:	d015      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002474:	4b43      	ldr	r3, [pc, #268]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	4940      	ldr	r1, [pc, #256]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002484:	4313      	orrs	r3, r2
 8002486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002492:	d105      	bne.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002494:	4b3b      	ldr	r3, [pc, #236]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	4a3a      	ldr	r2, [pc, #232]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800249a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800249e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d015      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024ac:	4b35      	ldr	r3, [pc, #212]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ba:	4932      	ldr	r1, [pc, #200]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ca:	d105      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024cc:	4b2d      	ldr	r3, [pc, #180]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4a2c      	ldr	r2, [pc, #176]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024d6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d015      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80024e4:	4b27      	ldr	r3, [pc, #156]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f2:	4924      	ldr	r1, [pc, #144]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002502:	d105      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002504:	4b1f      	ldr	r3, [pc, #124]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4a1e      	ldr	r2, [pc, #120]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800250a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800250e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d015      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800251c:	4b19      	ldr	r3, [pc, #100]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800251e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002522:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252a:	4916      	ldr	r1, [pc, #88]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800252c:	4313      	orrs	r3, r2
 800252e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002536:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800253a:	d105      	bne.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800253c:	4b11      	ldr	r3, [pc, #68]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	4a10      	ldr	r2, [pc, #64]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002542:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002546:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d019      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002554:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	4908      	ldr	r1, [pc, #32]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002572:	d109      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002574:	4b03      	ldr	r3, [pc, #12]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	4a02      	ldr	r2, [pc, #8]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800257a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800257e:	60d3      	str	r3, [r2, #12]
 8002580:	e002      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002582:	bf00      	nop
 8002584:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d015      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002594:	4b29      	ldr	r3, [pc, #164]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	4926      	ldr	r1, [pc, #152]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025b2:	d105      	bne.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80025b4:	4b21      	ldr	r3, [pc, #132]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	4a20      	ldr	r2, [pc, #128]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025be:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d015      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80025cc:	4b1b      	ldr	r3, [pc, #108]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025da:	4918      	ldr	r1, [pc, #96]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ea:	d105      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80025ec:	4b13      	ldr	r3, [pc, #76]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	4a12      	ldr	r2, [pc, #72]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d015      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002604:	4b0d      	ldr	r3, [pc, #52]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002606:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800260a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002612:	490a      	ldr	r1, [pc, #40]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002614:	4313      	orrs	r3, r2
 8002616:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002622:	d105      	bne.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002624:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	4a04      	ldr	r2, [pc, #16]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800262a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800262e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002630:	7cbb      	ldrb	r3, [r7, #18]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40021000 	.word	0x40021000

08002640 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b01      	cmp	r3, #1
 8002652:	d001      	beq.n	8002658 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e04c      	b.n	80026f2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2202      	movs	r2, #2
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a26      	ldr	r2, [pc, #152]	; (8002700 <HAL_TIM_Base_Start+0xc0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d022      	beq.n	80026b0 <HAL_TIM_Base_Start+0x70>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002672:	d01d      	beq.n	80026b0 <HAL_TIM_Base_Start+0x70>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a22      	ldr	r2, [pc, #136]	; (8002704 <HAL_TIM_Base_Start+0xc4>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d018      	beq.n	80026b0 <HAL_TIM_Base_Start+0x70>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a21      	ldr	r2, [pc, #132]	; (8002708 <HAL_TIM_Base_Start+0xc8>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d013      	beq.n	80026b0 <HAL_TIM_Base_Start+0x70>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a1f      	ldr	r2, [pc, #124]	; (800270c <HAL_TIM_Base_Start+0xcc>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d00e      	beq.n	80026b0 <HAL_TIM_Base_Start+0x70>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a1e      	ldr	r2, [pc, #120]	; (8002710 <HAL_TIM_Base_Start+0xd0>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d009      	beq.n	80026b0 <HAL_TIM_Base_Start+0x70>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a1c      	ldr	r2, [pc, #112]	; (8002714 <HAL_TIM_Base_Start+0xd4>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d004      	beq.n	80026b0 <HAL_TIM_Base_Start+0x70>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a1b      	ldr	r2, [pc, #108]	; (8002718 <HAL_TIM_Base_Start+0xd8>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d115      	bne.n	80026dc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	4b19      	ldr	r3, [pc, #100]	; (800271c <HAL_TIM_Base_Start+0xdc>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2b06      	cmp	r3, #6
 80026c0:	d015      	beq.n	80026ee <HAL_TIM_Base_Start+0xae>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c8:	d011      	beq.n	80026ee <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f042 0201 	orr.w	r2, r2, #1
 80026d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026da:	e008      	b.n	80026ee <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0201 	orr.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	e000      	b.n	80026f0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40012c00 	.word	0x40012c00
 8002704:	40000400 	.word	0x40000400
 8002708:	40000800 	.word	0x40000800
 800270c:	40000c00 	.word	0x40000c00
 8002710:	40013400 	.word	0x40013400
 8002714:	40014000 	.word	0x40014000
 8002718:	40015000 	.word	0x40015000
 800271c:	00010007 	.word	0x00010007

08002720 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e049      	b.n	80027c6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f841 	bl	80027ce <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3304      	adds	r3, #4
 800275c:	4619      	mov	r1, r3
 800275e:	4610      	mov	r0, r2
 8002760:	f000 fb36 	bl	8002dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e049      	b.n	8002888 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d106      	bne.n	800280e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7fe f9c9 	bl	8000ba0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2202      	movs	r2, #2
 8002812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3304      	adds	r3, #4
 800281e:	4619      	mov	r1, r3
 8002820:	4610      	mov	r0, r2
 8002822:	f000 fad5 	bl	8002dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d109      	bne.n	80028b4 <HAL_TIM_PWM_Start+0x24>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	bf14      	ite	ne
 80028ac:	2301      	movne	r3, #1
 80028ae:	2300      	moveq	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	e03c      	b.n	800292e <HAL_TIM_PWM_Start+0x9e>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d109      	bne.n	80028ce <HAL_TIM_PWM_Start+0x3e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	bf14      	ite	ne
 80028c6:	2301      	movne	r3, #1
 80028c8:	2300      	moveq	r3, #0
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	e02f      	b.n	800292e <HAL_TIM_PWM_Start+0x9e>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d109      	bne.n	80028e8 <HAL_TIM_PWM_Start+0x58>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b01      	cmp	r3, #1
 80028de:	bf14      	ite	ne
 80028e0:	2301      	movne	r3, #1
 80028e2:	2300      	moveq	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	e022      	b.n	800292e <HAL_TIM_PWM_Start+0x9e>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	2b0c      	cmp	r3, #12
 80028ec:	d109      	bne.n	8002902 <HAL_TIM_PWM_Start+0x72>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	bf14      	ite	ne
 80028fa:	2301      	movne	r3, #1
 80028fc:	2300      	moveq	r3, #0
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	e015      	b.n	800292e <HAL_TIM_PWM_Start+0x9e>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2b10      	cmp	r3, #16
 8002906:	d109      	bne.n	800291c <HAL_TIM_PWM_Start+0x8c>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b01      	cmp	r3, #1
 8002912:	bf14      	ite	ne
 8002914:	2301      	movne	r3, #1
 8002916:	2300      	moveq	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	e008      	b.n	800292e <HAL_TIM_PWM_Start+0x9e>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b01      	cmp	r3, #1
 8002926:	bf14      	ite	ne
 8002928:	2301      	movne	r3, #1
 800292a:	2300      	moveq	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e0a6      	b.n	8002a84 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d104      	bne.n	8002946 <HAL_TIM_PWM_Start+0xb6>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002944:	e023      	b.n	800298e <HAL_TIM_PWM_Start+0xfe>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	2b04      	cmp	r3, #4
 800294a:	d104      	bne.n	8002956 <HAL_TIM_PWM_Start+0xc6>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002954:	e01b      	b.n	800298e <HAL_TIM_PWM_Start+0xfe>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b08      	cmp	r3, #8
 800295a:	d104      	bne.n	8002966 <HAL_TIM_PWM_Start+0xd6>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002964:	e013      	b.n	800298e <HAL_TIM_PWM_Start+0xfe>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b0c      	cmp	r3, #12
 800296a:	d104      	bne.n	8002976 <HAL_TIM_PWM_Start+0xe6>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002974:	e00b      	b.n	800298e <HAL_TIM_PWM_Start+0xfe>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b10      	cmp	r3, #16
 800297a:	d104      	bne.n	8002986 <HAL_TIM_PWM_Start+0xf6>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002984:	e003      	b.n	800298e <HAL_TIM_PWM_Start+0xfe>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2202      	movs	r2, #2
 800298a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2201      	movs	r2, #1
 8002994:	6839      	ldr	r1, [r7, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f000 fdec 	bl	8003574 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a3a      	ldr	r2, [pc, #232]	; (8002a8c <HAL_TIM_PWM_Start+0x1fc>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d018      	beq.n	80029d8 <HAL_TIM_PWM_Start+0x148>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a39      	ldr	r2, [pc, #228]	; (8002a90 <HAL_TIM_PWM_Start+0x200>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d013      	beq.n	80029d8 <HAL_TIM_PWM_Start+0x148>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a37      	ldr	r2, [pc, #220]	; (8002a94 <HAL_TIM_PWM_Start+0x204>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d00e      	beq.n	80029d8 <HAL_TIM_PWM_Start+0x148>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a36      	ldr	r2, [pc, #216]	; (8002a98 <HAL_TIM_PWM_Start+0x208>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d009      	beq.n	80029d8 <HAL_TIM_PWM_Start+0x148>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a34      	ldr	r2, [pc, #208]	; (8002a9c <HAL_TIM_PWM_Start+0x20c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d004      	beq.n	80029d8 <HAL_TIM_PWM_Start+0x148>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a33      	ldr	r2, [pc, #204]	; (8002aa0 <HAL_TIM_PWM_Start+0x210>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d101      	bne.n	80029dc <HAL_TIM_PWM_Start+0x14c>
 80029d8:	2301      	movs	r3, #1
 80029da:	e000      	b.n	80029de <HAL_TIM_PWM_Start+0x14e>
 80029dc:	2300      	movs	r3, #0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d007      	beq.n	80029f2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a25      	ldr	r2, [pc, #148]	; (8002a8c <HAL_TIM_PWM_Start+0x1fc>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d022      	beq.n	8002a42 <HAL_TIM_PWM_Start+0x1b2>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a04:	d01d      	beq.n	8002a42 <HAL_TIM_PWM_Start+0x1b2>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a26      	ldr	r2, [pc, #152]	; (8002aa4 <HAL_TIM_PWM_Start+0x214>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d018      	beq.n	8002a42 <HAL_TIM_PWM_Start+0x1b2>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a24      	ldr	r2, [pc, #144]	; (8002aa8 <HAL_TIM_PWM_Start+0x218>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d013      	beq.n	8002a42 <HAL_TIM_PWM_Start+0x1b2>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a23      	ldr	r2, [pc, #140]	; (8002aac <HAL_TIM_PWM_Start+0x21c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d00e      	beq.n	8002a42 <HAL_TIM_PWM_Start+0x1b2>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a19      	ldr	r2, [pc, #100]	; (8002a90 <HAL_TIM_PWM_Start+0x200>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d009      	beq.n	8002a42 <HAL_TIM_PWM_Start+0x1b2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a18      	ldr	r2, [pc, #96]	; (8002a94 <HAL_TIM_PWM_Start+0x204>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d004      	beq.n	8002a42 <HAL_TIM_PWM_Start+0x1b2>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a18      	ldr	r2, [pc, #96]	; (8002aa0 <HAL_TIM_PWM_Start+0x210>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d115      	bne.n	8002a6e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	4b19      	ldr	r3, [pc, #100]	; (8002ab0 <HAL_TIM_PWM_Start+0x220>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2b06      	cmp	r3, #6
 8002a52:	d015      	beq.n	8002a80 <HAL_TIM_PWM_Start+0x1f0>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a5a:	d011      	beq.n	8002a80 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a6c:	e008      	b.n	8002a80 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f042 0201 	orr.w	r2, r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	e000      	b.n	8002a82 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40012c00 	.word	0x40012c00
 8002a90:	40013400 	.word	0x40013400
 8002a94:	40014000 	.word	0x40014000
 8002a98:	40014400 	.word	0x40014400
 8002a9c:	40014800 	.word	0x40014800
 8002aa0:	40015000 	.word	0x40015000
 8002aa4:	40000400 	.word	0x40000400
 8002aa8:	40000800 	.word	0x40000800
 8002aac:	40000c00 	.word	0x40000c00
 8002ab0:	00010007 	.word	0x00010007

08002ab4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e066      	b.n	8002ba0 <HAL_TIM_OC_ConfigChannel+0xec>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b14      	cmp	r3, #20
 8002ade:	d857      	bhi.n	8002b90 <HAL_TIM_OC_ConfigChannel+0xdc>
 8002ae0:	a201      	add	r2, pc, #4	; (adr r2, 8002ae8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8002ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae6:	bf00      	nop
 8002ae8:	08002b3d 	.word	0x08002b3d
 8002aec:	08002b91 	.word	0x08002b91
 8002af0:	08002b91 	.word	0x08002b91
 8002af4:	08002b91 	.word	0x08002b91
 8002af8:	08002b4b 	.word	0x08002b4b
 8002afc:	08002b91 	.word	0x08002b91
 8002b00:	08002b91 	.word	0x08002b91
 8002b04:	08002b91 	.word	0x08002b91
 8002b08:	08002b59 	.word	0x08002b59
 8002b0c:	08002b91 	.word	0x08002b91
 8002b10:	08002b91 	.word	0x08002b91
 8002b14:	08002b91 	.word	0x08002b91
 8002b18:	08002b67 	.word	0x08002b67
 8002b1c:	08002b91 	.word	0x08002b91
 8002b20:	08002b91 	.word	0x08002b91
 8002b24:	08002b91 	.word	0x08002b91
 8002b28:	08002b75 	.word	0x08002b75
 8002b2c:	08002b91 	.word	0x08002b91
 8002b30:	08002b91 	.word	0x08002b91
 8002b34:	08002b91 	.word	0x08002b91
 8002b38:	08002b83 	.word	0x08002b83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 f9ec 	bl	8002f20 <TIM_OC1_SetConfig>
      break;
 8002b48:	e025      	b.n	8002b96 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68b9      	ldr	r1, [r7, #8]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 fa7f 	bl	8003054 <TIM_OC2_SetConfig>
      break;
 8002b56:	e01e      	b.n	8002b96 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68b9      	ldr	r1, [r7, #8]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f000 fb0c 	bl	800317c <TIM_OC3_SetConfig>
      break;
 8002b64:	e017      	b.n	8002b96 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68b9      	ldr	r1, [r7, #8]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 fb97 	bl	80032a0 <TIM_OC4_SetConfig>
      break;
 8002b72:	e010      	b.n	8002b96 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68b9      	ldr	r1, [r7, #8]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fc24 	bl	80033c8 <TIM_OC5_SetConfig>
      break;
 8002b80:	e009      	b.n	8002b96 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68b9      	ldr	r1, [r7, #8]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f000 fc87 	bl	800349c <TIM_OC6_SetConfig>
      break;
 8002b8e:	e002      	b.n	8002b96 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	75fb      	strb	r3, [r7, #23]
      break;
 8002b94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e0ff      	b.n	8002dc6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b14      	cmp	r3, #20
 8002bd2:	f200 80f0 	bhi.w	8002db6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002bd6:	a201      	add	r2, pc, #4	; (adr r2, 8002bdc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bdc:	08002c31 	.word	0x08002c31
 8002be0:	08002db7 	.word	0x08002db7
 8002be4:	08002db7 	.word	0x08002db7
 8002be8:	08002db7 	.word	0x08002db7
 8002bec:	08002c71 	.word	0x08002c71
 8002bf0:	08002db7 	.word	0x08002db7
 8002bf4:	08002db7 	.word	0x08002db7
 8002bf8:	08002db7 	.word	0x08002db7
 8002bfc:	08002cb3 	.word	0x08002cb3
 8002c00:	08002db7 	.word	0x08002db7
 8002c04:	08002db7 	.word	0x08002db7
 8002c08:	08002db7 	.word	0x08002db7
 8002c0c:	08002cf3 	.word	0x08002cf3
 8002c10:	08002db7 	.word	0x08002db7
 8002c14:	08002db7 	.word	0x08002db7
 8002c18:	08002db7 	.word	0x08002db7
 8002c1c:	08002d35 	.word	0x08002d35
 8002c20:	08002db7 	.word	0x08002db7
 8002c24:	08002db7 	.word	0x08002db7
 8002c28:	08002db7 	.word	0x08002db7
 8002c2c:	08002d75 	.word	0x08002d75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68b9      	ldr	r1, [r7, #8]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 f972 	bl	8002f20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699a      	ldr	r2, [r3, #24]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0208 	orr.w	r2, r2, #8
 8002c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699a      	ldr	r2, [r3, #24]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0204 	bic.w	r2, r2, #4
 8002c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6999      	ldr	r1, [r3, #24]
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	691a      	ldr	r2, [r3, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	619a      	str	r2, [r3, #24]
      break;
 8002c6e:	e0a5      	b.n	8002dbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68b9      	ldr	r1, [r7, #8]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 f9ec 	bl	8003054 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699a      	ldr	r2, [r3, #24]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699a      	ldr	r2, [r3, #24]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6999      	ldr	r1, [r3, #24]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	021a      	lsls	r2, r3, #8
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	619a      	str	r2, [r3, #24]
      break;
 8002cb0:	e084      	b.n	8002dbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68b9      	ldr	r1, [r7, #8]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 fa5f 	bl	800317c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	69da      	ldr	r2, [r3, #28]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f042 0208 	orr.w	r2, r2, #8
 8002ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	69da      	ldr	r2, [r3, #28]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0204 	bic.w	r2, r2, #4
 8002cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	69d9      	ldr	r1, [r3, #28]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	61da      	str	r2, [r3, #28]
      break;
 8002cf0:	e064      	b.n	8002dbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68b9      	ldr	r1, [r7, #8]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 fad1 	bl	80032a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	69da      	ldr	r2, [r3, #28]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	69da      	ldr	r2, [r3, #28]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	69d9      	ldr	r1, [r3, #28]
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	021a      	lsls	r2, r3, #8
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	61da      	str	r2, [r3, #28]
      break;
 8002d32:	e043      	b.n	8002dbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68b9      	ldr	r1, [r7, #8]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 fb44 	bl	80033c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0208 	orr.w	r2, r2, #8
 8002d4e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0204 	bic.w	r2, r2, #4
 8002d5e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	691a      	ldr	r2, [r3, #16]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002d72:	e023      	b.n	8002dbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 fb8e 	bl	800349c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d8e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d9e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	021a      	lsls	r2, r3, #8
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002db4:	e002      	b.n	8002dbc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	75fb      	strb	r3, [r7, #23]
      break;
 8002dba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop

08002dd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a46      	ldr	r2, [pc, #280]	; (8002efc <TIM_Base_SetConfig+0x12c>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d017      	beq.n	8002e18 <TIM_Base_SetConfig+0x48>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dee:	d013      	beq.n	8002e18 <TIM_Base_SetConfig+0x48>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a43      	ldr	r2, [pc, #268]	; (8002f00 <TIM_Base_SetConfig+0x130>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d00f      	beq.n	8002e18 <TIM_Base_SetConfig+0x48>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a42      	ldr	r2, [pc, #264]	; (8002f04 <TIM_Base_SetConfig+0x134>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d00b      	beq.n	8002e18 <TIM_Base_SetConfig+0x48>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a41      	ldr	r2, [pc, #260]	; (8002f08 <TIM_Base_SetConfig+0x138>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d007      	beq.n	8002e18 <TIM_Base_SetConfig+0x48>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a40      	ldr	r2, [pc, #256]	; (8002f0c <TIM_Base_SetConfig+0x13c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d003      	beq.n	8002e18 <TIM_Base_SetConfig+0x48>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a3f      	ldr	r2, [pc, #252]	; (8002f10 <TIM_Base_SetConfig+0x140>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d108      	bne.n	8002e2a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a33      	ldr	r2, [pc, #204]	; (8002efc <TIM_Base_SetConfig+0x12c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d023      	beq.n	8002e7a <TIM_Base_SetConfig+0xaa>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e38:	d01f      	beq.n	8002e7a <TIM_Base_SetConfig+0xaa>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a30      	ldr	r2, [pc, #192]	; (8002f00 <TIM_Base_SetConfig+0x130>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d01b      	beq.n	8002e7a <TIM_Base_SetConfig+0xaa>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a2f      	ldr	r2, [pc, #188]	; (8002f04 <TIM_Base_SetConfig+0x134>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d017      	beq.n	8002e7a <TIM_Base_SetConfig+0xaa>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a2e      	ldr	r2, [pc, #184]	; (8002f08 <TIM_Base_SetConfig+0x138>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d013      	beq.n	8002e7a <TIM_Base_SetConfig+0xaa>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a2d      	ldr	r2, [pc, #180]	; (8002f0c <TIM_Base_SetConfig+0x13c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d00f      	beq.n	8002e7a <TIM_Base_SetConfig+0xaa>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a2d      	ldr	r2, [pc, #180]	; (8002f14 <TIM_Base_SetConfig+0x144>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00b      	beq.n	8002e7a <TIM_Base_SetConfig+0xaa>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a2c      	ldr	r2, [pc, #176]	; (8002f18 <TIM_Base_SetConfig+0x148>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d007      	beq.n	8002e7a <TIM_Base_SetConfig+0xaa>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a2b      	ldr	r2, [pc, #172]	; (8002f1c <TIM_Base_SetConfig+0x14c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d003      	beq.n	8002e7a <TIM_Base_SetConfig+0xaa>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a26      	ldr	r2, [pc, #152]	; (8002f10 <TIM_Base_SetConfig+0x140>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d108      	bne.n	8002e8c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a12      	ldr	r2, [pc, #72]	; (8002efc <TIM_Base_SetConfig+0x12c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d013      	beq.n	8002ee0 <TIM_Base_SetConfig+0x110>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a14      	ldr	r2, [pc, #80]	; (8002f0c <TIM_Base_SetConfig+0x13c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d00f      	beq.n	8002ee0 <TIM_Base_SetConfig+0x110>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a14      	ldr	r2, [pc, #80]	; (8002f14 <TIM_Base_SetConfig+0x144>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d00b      	beq.n	8002ee0 <TIM_Base_SetConfig+0x110>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a13      	ldr	r2, [pc, #76]	; (8002f18 <TIM_Base_SetConfig+0x148>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d007      	beq.n	8002ee0 <TIM_Base_SetConfig+0x110>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a12      	ldr	r2, [pc, #72]	; (8002f1c <TIM_Base_SetConfig+0x14c>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d003      	beq.n	8002ee0 <TIM_Base_SetConfig+0x110>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a0d      	ldr	r2, [pc, #52]	; (8002f10 <TIM_Base_SetConfig+0x140>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d103      	bne.n	8002ee8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	615a      	str	r2, [r3, #20]
}
 8002eee:	bf00      	nop
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40012c00 	.word	0x40012c00
 8002f00:	40000400 	.word	0x40000400
 8002f04:	40000800 	.word	0x40000800
 8002f08:	40000c00 	.word	0x40000c00
 8002f0c:	40013400 	.word	0x40013400
 8002f10:	40015000 	.word	0x40015000
 8002f14:	40014000 	.word	0x40014000
 8002f18:	40014400 	.word	0x40014400
 8002f1c:	40014800 	.word	0x40014800

08002f20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	f023 0201 	bic.w	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f023 0303 	bic.w	r3, r3, #3
 8002f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f023 0302 	bic.w	r3, r3, #2
 8002f6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a30      	ldr	r2, [pc, #192]	; (800303c <TIM_OC1_SetConfig+0x11c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d013      	beq.n	8002fa8 <TIM_OC1_SetConfig+0x88>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a2f      	ldr	r2, [pc, #188]	; (8003040 <TIM_OC1_SetConfig+0x120>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d00f      	beq.n	8002fa8 <TIM_OC1_SetConfig+0x88>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a2e      	ldr	r2, [pc, #184]	; (8003044 <TIM_OC1_SetConfig+0x124>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d00b      	beq.n	8002fa8 <TIM_OC1_SetConfig+0x88>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a2d      	ldr	r2, [pc, #180]	; (8003048 <TIM_OC1_SetConfig+0x128>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d007      	beq.n	8002fa8 <TIM_OC1_SetConfig+0x88>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a2c      	ldr	r2, [pc, #176]	; (800304c <TIM_OC1_SetConfig+0x12c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d003      	beq.n	8002fa8 <TIM_OC1_SetConfig+0x88>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a2b      	ldr	r2, [pc, #172]	; (8003050 <TIM_OC1_SetConfig+0x130>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d10c      	bne.n	8002fc2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f023 0308 	bic.w	r3, r3, #8
 8002fae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f023 0304 	bic.w	r3, r3, #4
 8002fc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a1d      	ldr	r2, [pc, #116]	; (800303c <TIM_OC1_SetConfig+0x11c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d013      	beq.n	8002ff2 <TIM_OC1_SetConfig+0xd2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a1c      	ldr	r2, [pc, #112]	; (8003040 <TIM_OC1_SetConfig+0x120>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00f      	beq.n	8002ff2 <TIM_OC1_SetConfig+0xd2>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a1b      	ldr	r2, [pc, #108]	; (8003044 <TIM_OC1_SetConfig+0x124>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00b      	beq.n	8002ff2 <TIM_OC1_SetConfig+0xd2>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a1a      	ldr	r2, [pc, #104]	; (8003048 <TIM_OC1_SetConfig+0x128>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d007      	beq.n	8002ff2 <TIM_OC1_SetConfig+0xd2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a19      	ldr	r2, [pc, #100]	; (800304c <TIM_OC1_SetConfig+0x12c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d003      	beq.n	8002ff2 <TIM_OC1_SetConfig+0xd2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a18      	ldr	r2, [pc, #96]	; (8003050 <TIM_OC1_SetConfig+0x130>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d111      	bne.n	8003016 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	4313      	orrs	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	4313      	orrs	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	621a      	str	r2, [r3, #32]
}
 8003030:	bf00      	nop
 8003032:	371c      	adds	r7, #28
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	40012c00 	.word	0x40012c00
 8003040:	40013400 	.word	0x40013400
 8003044:	40014000 	.word	0x40014000
 8003048:	40014400 	.word	0x40014400
 800304c:	40014800 	.word	0x40014800
 8003050:	40015000 	.word	0x40015000

08003054 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	f023 0210 	bic.w	r2, r3, #16
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800308e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	021b      	lsls	r3, r3, #8
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	4313      	orrs	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f023 0320 	bic.w	r3, r3, #32
 80030a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a2c      	ldr	r2, [pc, #176]	; (8003164 <TIM_OC2_SetConfig+0x110>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d007      	beq.n	80030c8 <TIM_OC2_SetConfig+0x74>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a2b      	ldr	r2, [pc, #172]	; (8003168 <TIM_OC2_SetConfig+0x114>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d003      	beq.n	80030c8 <TIM_OC2_SetConfig+0x74>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a2a      	ldr	r2, [pc, #168]	; (800316c <TIM_OC2_SetConfig+0x118>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d10d      	bne.n	80030e4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	4313      	orrs	r3, r2
 80030da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a1f      	ldr	r2, [pc, #124]	; (8003164 <TIM_OC2_SetConfig+0x110>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d013      	beq.n	8003114 <TIM_OC2_SetConfig+0xc0>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a1e      	ldr	r2, [pc, #120]	; (8003168 <TIM_OC2_SetConfig+0x114>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d00f      	beq.n	8003114 <TIM_OC2_SetConfig+0xc0>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a1e      	ldr	r2, [pc, #120]	; (8003170 <TIM_OC2_SetConfig+0x11c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d00b      	beq.n	8003114 <TIM_OC2_SetConfig+0xc0>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a1d      	ldr	r2, [pc, #116]	; (8003174 <TIM_OC2_SetConfig+0x120>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d007      	beq.n	8003114 <TIM_OC2_SetConfig+0xc0>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a1c      	ldr	r2, [pc, #112]	; (8003178 <TIM_OC2_SetConfig+0x124>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d003      	beq.n	8003114 <TIM_OC2_SetConfig+0xc0>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a17      	ldr	r2, [pc, #92]	; (800316c <TIM_OC2_SetConfig+0x118>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d113      	bne.n	800313c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800311a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003122:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	4313      	orrs	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4313      	orrs	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	621a      	str	r2, [r3, #32]
}
 8003156:	bf00      	nop
 8003158:	371c      	adds	r7, #28
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40012c00 	.word	0x40012c00
 8003168:	40013400 	.word	0x40013400
 800316c:	40015000 	.word	0x40015000
 8003170:	40014000 	.word	0x40014000
 8003174:	40014400 	.word	0x40014400
 8003178:	40014800 	.word	0x40014800

0800317c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f023 0303 	bic.w	r3, r3, #3
 80031b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	4313      	orrs	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a2b      	ldr	r2, [pc, #172]	; (8003288 <TIM_OC3_SetConfig+0x10c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d007      	beq.n	80031ee <TIM_OC3_SetConfig+0x72>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a2a      	ldr	r2, [pc, #168]	; (800328c <TIM_OC3_SetConfig+0x110>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d003      	beq.n	80031ee <TIM_OC3_SetConfig+0x72>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a29      	ldr	r2, [pc, #164]	; (8003290 <TIM_OC3_SetConfig+0x114>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d10d      	bne.n	800320a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	021b      	lsls	r3, r3, #8
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	4313      	orrs	r3, r2
 8003200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003208:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a1e      	ldr	r2, [pc, #120]	; (8003288 <TIM_OC3_SetConfig+0x10c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d013      	beq.n	800323a <TIM_OC3_SetConfig+0xbe>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a1d      	ldr	r2, [pc, #116]	; (800328c <TIM_OC3_SetConfig+0x110>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d00f      	beq.n	800323a <TIM_OC3_SetConfig+0xbe>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a1d      	ldr	r2, [pc, #116]	; (8003294 <TIM_OC3_SetConfig+0x118>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d00b      	beq.n	800323a <TIM_OC3_SetConfig+0xbe>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a1c      	ldr	r2, [pc, #112]	; (8003298 <TIM_OC3_SetConfig+0x11c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d007      	beq.n	800323a <TIM_OC3_SetConfig+0xbe>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a1b      	ldr	r2, [pc, #108]	; (800329c <TIM_OC3_SetConfig+0x120>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d003      	beq.n	800323a <TIM_OC3_SetConfig+0xbe>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a16      	ldr	r2, [pc, #88]	; (8003290 <TIM_OC3_SetConfig+0x114>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d113      	bne.n	8003262 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4313      	orrs	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	621a      	str	r2, [r3, #32]
}
 800327c:	bf00      	nop
 800327e:	371c      	adds	r7, #28
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	40012c00 	.word	0x40012c00
 800328c:	40013400 	.word	0x40013400
 8003290:	40015000 	.word	0x40015000
 8003294:	40014000 	.word	0x40014000
 8003298:	40014400 	.word	0x40014400
 800329c:	40014800 	.word	0x40014800

080032a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b087      	sub	sp, #28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	021b      	lsls	r3, r3, #8
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	031b      	lsls	r3, r3, #12
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a2c      	ldr	r2, [pc, #176]	; (80033b0 <TIM_OC4_SetConfig+0x110>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d007      	beq.n	8003314 <TIM_OC4_SetConfig+0x74>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a2b      	ldr	r2, [pc, #172]	; (80033b4 <TIM_OC4_SetConfig+0x114>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d003      	beq.n	8003314 <TIM_OC4_SetConfig+0x74>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a2a      	ldr	r2, [pc, #168]	; (80033b8 <TIM_OC4_SetConfig+0x118>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d10d      	bne.n	8003330 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800331a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	031b      	lsls	r3, r3, #12
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800332e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a1f      	ldr	r2, [pc, #124]	; (80033b0 <TIM_OC4_SetConfig+0x110>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d013      	beq.n	8003360 <TIM_OC4_SetConfig+0xc0>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a1e      	ldr	r2, [pc, #120]	; (80033b4 <TIM_OC4_SetConfig+0x114>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d00f      	beq.n	8003360 <TIM_OC4_SetConfig+0xc0>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a1e      	ldr	r2, [pc, #120]	; (80033bc <TIM_OC4_SetConfig+0x11c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00b      	beq.n	8003360 <TIM_OC4_SetConfig+0xc0>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a1d      	ldr	r2, [pc, #116]	; (80033c0 <TIM_OC4_SetConfig+0x120>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d007      	beq.n	8003360 <TIM_OC4_SetConfig+0xc0>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a1c      	ldr	r2, [pc, #112]	; (80033c4 <TIM_OC4_SetConfig+0x124>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d003      	beq.n	8003360 <TIM_OC4_SetConfig+0xc0>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a17      	ldr	r2, [pc, #92]	; (80033b8 <TIM_OC4_SetConfig+0x118>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d113      	bne.n	8003388 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003366:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800336e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	019b      	lsls	r3, r3, #6
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	019b      	lsls	r3, r3, #6
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	621a      	str	r2, [r3, #32]
}
 80033a2:	bf00      	nop
 80033a4:	371c      	adds	r7, #28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	40012c00 	.word	0x40012c00
 80033b4:	40013400 	.word	0x40013400
 80033b8:	40015000 	.word	0x40015000
 80033bc:	40014000 	.word	0x40014000
 80033c0:	40014400 	.word	0x40014400
 80033c4:	40014800 	.word	0x40014800

080033c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800340c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	041b      	lsls	r3, r3, #16
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a19      	ldr	r2, [pc, #100]	; (8003484 <TIM_OC5_SetConfig+0xbc>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d013      	beq.n	800344a <TIM_OC5_SetConfig+0x82>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a18      	ldr	r2, [pc, #96]	; (8003488 <TIM_OC5_SetConfig+0xc0>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d00f      	beq.n	800344a <TIM_OC5_SetConfig+0x82>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a17      	ldr	r2, [pc, #92]	; (800348c <TIM_OC5_SetConfig+0xc4>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d00b      	beq.n	800344a <TIM_OC5_SetConfig+0x82>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a16      	ldr	r2, [pc, #88]	; (8003490 <TIM_OC5_SetConfig+0xc8>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d007      	beq.n	800344a <TIM_OC5_SetConfig+0x82>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a15      	ldr	r2, [pc, #84]	; (8003494 <TIM_OC5_SetConfig+0xcc>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d003      	beq.n	800344a <TIM_OC5_SetConfig+0x82>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a14      	ldr	r2, [pc, #80]	; (8003498 <TIM_OC5_SetConfig+0xd0>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d109      	bne.n	800345e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003450:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	021b      	lsls	r3, r3, #8
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	4313      	orrs	r3, r2
 800345c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	621a      	str	r2, [r3, #32]
}
 8003478:	bf00      	nop
 800347a:	371c      	adds	r7, #28
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	40012c00 	.word	0x40012c00
 8003488:	40013400 	.word	0x40013400
 800348c:	40014000 	.word	0x40014000
 8003490:	40014400 	.word	0x40014400
 8003494:	40014800 	.word	0x40014800
 8003498:	40015000 	.word	0x40015000

0800349c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	021b      	lsls	r3, r3, #8
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80034e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	051b      	lsls	r3, r3, #20
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a1a      	ldr	r2, [pc, #104]	; (800355c <TIM_OC6_SetConfig+0xc0>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d013      	beq.n	8003520 <TIM_OC6_SetConfig+0x84>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a19      	ldr	r2, [pc, #100]	; (8003560 <TIM_OC6_SetConfig+0xc4>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d00f      	beq.n	8003520 <TIM_OC6_SetConfig+0x84>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a18      	ldr	r2, [pc, #96]	; (8003564 <TIM_OC6_SetConfig+0xc8>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d00b      	beq.n	8003520 <TIM_OC6_SetConfig+0x84>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a17      	ldr	r2, [pc, #92]	; (8003568 <TIM_OC6_SetConfig+0xcc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d007      	beq.n	8003520 <TIM_OC6_SetConfig+0x84>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a16      	ldr	r2, [pc, #88]	; (800356c <TIM_OC6_SetConfig+0xd0>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d003      	beq.n	8003520 <TIM_OC6_SetConfig+0x84>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a15      	ldr	r2, [pc, #84]	; (8003570 <TIM_OC6_SetConfig+0xd4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d109      	bne.n	8003534 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003526:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	029b      	lsls	r3, r3, #10
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	621a      	str	r2, [r3, #32]
}
 800354e:	bf00      	nop
 8003550:	371c      	adds	r7, #28
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40012c00 	.word	0x40012c00
 8003560:	40013400 	.word	0x40013400
 8003564:	40014000 	.word	0x40014000
 8003568:	40014400 	.word	0x40014400
 800356c:	40014800 	.word	0x40014800
 8003570:	40015000 	.word	0x40015000

08003574 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f003 031f 	and.w	r3, r3, #31
 8003586:	2201      	movs	r2, #1
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6a1a      	ldr	r2, [r3, #32]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	43db      	mvns	r3, r3
 8003596:	401a      	ands	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a1a      	ldr	r2, [r3, #32]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	f003 031f 	and.w	r3, r3, #31
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	fa01 f303 	lsl.w	r3, r1, r3
 80035ac:	431a      	orrs	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	621a      	str	r2, [r3, #32]
}
 80035b2:	bf00      	nop
 80035b4:	371c      	adds	r7, #28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
	...

080035c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e074      	b.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a34      	ldr	r2, [pc, #208]	; (80036d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d009      	beq.n	8003616 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a33      	ldr	r2, [pc, #204]	; (80036d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d004      	beq.n	8003616 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a31      	ldr	r2, [pc, #196]	; (80036d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d108      	bne.n	8003628 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800361c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	4313      	orrs	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800362e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003632:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	4313      	orrs	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a21      	ldr	r2, [pc, #132]	; (80036d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d022      	beq.n	8003696 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003658:	d01d      	beq.n	8003696 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a1f      	ldr	r2, [pc, #124]	; (80036dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d018      	beq.n	8003696 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a1d      	ldr	r2, [pc, #116]	; (80036e0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d013      	beq.n	8003696 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a1c      	ldr	r2, [pc, #112]	; (80036e4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d00e      	beq.n	8003696 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a15      	ldr	r2, [pc, #84]	; (80036d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d009      	beq.n	8003696 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a18      	ldr	r2, [pc, #96]	; (80036e8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d004      	beq.n	8003696 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a11      	ldr	r2, [pc, #68]	; (80036d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d10c      	bne.n	80036b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800369c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40012c00 	.word	0x40012c00
 80036d4:	40013400 	.word	0x40013400
 80036d8:	40015000 	.word	0x40015000
 80036dc:	40000400 	.word	0x40000400
 80036e0:	40000800 	.word	0x40000800
 80036e4:	40000c00 	.word	0x40000c00
 80036e8:	40014000 	.word	0x40014000

080036ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003704:	2302      	movs	r3, #2
 8003706:	e096      	b.n	8003836 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	4313      	orrs	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	4313      	orrs	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	4313      	orrs	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4313      	orrs	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	4313      	orrs	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	041b      	lsls	r3, r3, #16
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a2f      	ldr	r2, [pc, #188]	; (8003844 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d009      	beq.n	80037a0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a2d      	ldr	r2, [pc, #180]	; (8003848 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d004      	beq.n	80037a0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a2c      	ldr	r2, [pc, #176]	; (800384c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d106      	bne.n	80037ae <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a24      	ldr	r2, [pc, #144]	; (8003844 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d009      	beq.n	80037cc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a22      	ldr	r2, [pc, #136]	; (8003848 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d004      	beq.n	80037cc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a21      	ldr	r2, [pc, #132]	; (800384c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d12b      	bne.n	8003824 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d6:	051b      	lsls	r3, r3, #20
 80037d8:	4313      	orrs	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a11      	ldr	r2, [pc, #68]	; (8003844 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d009      	beq.n	8003816 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a10      	ldr	r2, [pc, #64]	; (8003848 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d004      	beq.n	8003816 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a0e      	ldr	r2, [pc, #56]	; (800384c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d106      	bne.n	8003824 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003820:	4313      	orrs	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40012c00 	.word	0x40012c00
 8003848:	40013400 	.word	0x40013400
 800384c:	40015000 	.word	0x40015000

08003850 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e042      	b.n	80038e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003868:	2b00      	cmp	r3, #0
 800386a:	d106      	bne.n	800387a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f7fd fa37 	bl	8000ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2224      	movs	r2, #36	; 0x24
 800387e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0201 	bic.w	r2, r2, #1
 8003890:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fc0c 	bl	80040b0 <UART_SetConfig>
 8003898:	4603      	mov	r3, r0
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e022      	b.n	80038e8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d002      	beq.n	80038b0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 fefc 	bl	80046a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 ff83 	bl	80047ec <UART_CheckIdleState>
 80038e6:	4603      	mov	r3, r0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b091      	sub	sp, #68	; 0x44
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	4613      	mov	r3, r2
 80038fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003904:	2b20      	cmp	r3, #32
 8003906:	f040 808c 	bne.w	8003a22 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d002      	beq.n	8003916 <HAL_UART_Transmit_IT+0x26>
 8003910:	88fb      	ldrh	r3, [r7, #6]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e084      	b.n	8003a24 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003920:	2b01      	cmp	r3, #1
 8003922:	d101      	bne.n	8003928 <HAL_UART_Transmit_IT+0x38>
 8003924:	2302      	movs	r3, #2
 8003926:	e07d      	b.n	8003a24 <HAL_UART_Transmit_IT+0x134>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	88fa      	ldrh	r2, [r7, #6]
 800393a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	88fa      	ldrh	r2, [r7, #6]
 8003942:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2221      	movs	r2, #33	; 0x21
 8003958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003964:	d12e      	bne.n	80039c4 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800396e:	d107      	bne.n	8003980 <HAL_UART_Transmit_IT+0x90>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d103      	bne.n	8003980 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4a2d      	ldr	r2, [pc, #180]	; (8003a30 <HAL_UART_Transmit_IT+0x140>)
 800397c:	675a      	str	r2, [r3, #116]	; 0x74
 800397e:	e002      	b.n	8003986 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4a2c      	ldr	r2, [pc, #176]	; (8003a34 <HAL_UART_Transmit_IT+0x144>)
 8003984:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	3308      	adds	r3, #8
 8003994:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003998:	e853 3f00 	ldrex	r3, [r3]
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	3308      	adds	r3, #8
 80039ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039ae:	637a      	str	r2, [r7, #52]	; 0x34
 80039b0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039b6:	e841 2300 	strex	r3, r2, [r1]
 80039ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1e5      	bne.n	800398e <HAL_UART_Transmit_IT+0x9e>
 80039c2:	e02c      	b.n	8003a1e <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039cc:	d107      	bne.n	80039de <HAL_UART_Transmit_IT+0xee>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d103      	bne.n	80039de <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4a17      	ldr	r2, [pc, #92]	; (8003a38 <HAL_UART_Transmit_IT+0x148>)
 80039da:	675a      	str	r2, [r3, #116]	; 0x74
 80039dc:	e002      	b.n	80039e4 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4a16      	ldr	r2, [pc, #88]	; (8003a3c <HAL_UART_Transmit_IT+0x14c>)
 80039e2:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	e853 3f00 	ldrex	r3, [r3]
 80039f8:	613b      	str	r3, [r7, #16]
   return(result);
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a0a:	623b      	str	r3, [r7, #32]
 8003a0c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0e:	69f9      	ldr	r1, [r7, #28]
 8003a10:	6a3a      	ldr	r2, [r7, #32]
 8003a12:	e841 2300 	strex	r3, r2, [r1]
 8003a16:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1e6      	bne.n	80039ec <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	e000      	b.n	8003a24 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8003a22:	2302      	movs	r3, #2
  }
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3744      	adds	r7, #68	; 0x44
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	08004d65 	.word	0x08004d65
 8003a34:	08004c85 	.word	0x08004c85
 8003a38:	08004bc3 	.word	0x08004bc3
 8003a3c:	08004b0b 	.word	0x08004b0b

08003a40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b0ba      	sub	sp, #232	; 0xe8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003a6a:	f640 030f 	movw	r3, #2063	; 0x80f
 8003a6e:	4013      	ands	r3, r2
 8003a70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003a74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d11b      	bne.n	8003ab4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a80:	f003 0320 	and.w	r3, r3, #32
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d015      	beq.n	8003ab4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a8c:	f003 0320 	and.w	r3, r3, #32
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d105      	bne.n	8003aa0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d009      	beq.n	8003ab4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 82d6 	beq.w	8004056 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	4798      	blx	r3
      }
      return;
 8003ab2:	e2d0      	b.n	8004056 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003ab4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 811f 	beq.w	8003cfc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003abe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003ac2:	4b8b      	ldr	r3, [pc, #556]	; (8003cf0 <HAL_UART_IRQHandler+0x2b0>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d106      	bne.n	8003ad8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003aca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003ace:	4b89      	ldr	r3, [pc, #548]	; (8003cf4 <HAL_UART_IRQHandler+0x2b4>)
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 8112 	beq.w	8003cfc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d011      	beq.n	8003b08 <HAL_UART_IRQHandler+0xc8>
 8003ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00b      	beq.n	8003b08 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2201      	movs	r2, #1
 8003af6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003afe:	f043 0201 	orr.w	r2, r3, #1
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d011      	beq.n	8003b38 <HAL_UART_IRQHandler+0xf8>
 8003b14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00b      	beq.n	8003b38 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2202      	movs	r2, #2
 8003b26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b2e:	f043 0204 	orr.w	r2, r3, #4
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d011      	beq.n	8003b68 <HAL_UART_IRQHandler+0x128>
 8003b44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00b      	beq.n	8003b68 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2204      	movs	r2, #4
 8003b56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b5e:	f043 0202 	orr.w	r2, r3, #2
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b6c:	f003 0308 	and.w	r3, r3, #8
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d017      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b78:	f003 0320 	and.w	r3, r3, #32
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d105      	bne.n	8003b8c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003b80:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003b84:	4b5a      	ldr	r3, [pc, #360]	; (8003cf0 <HAL_UART_IRQHandler+0x2b0>)
 8003b86:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00b      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2208      	movs	r2, #8
 8003b92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b9a:	f043 0208 	orr.w	r2, r3, #8
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d012      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x196>
 8003bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00c      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bcc:	f043 0220 	orr.w	r2, r3, #32
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 823c 	beq.w	800405a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d013      	beq.n	8003c16 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bf2:	f003 0320 	and.w	r3, r3, #32
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d105      	bne.n	8003c06 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d007      	beq.n	8003c16 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2a:	2b40      	cmp	r3, #64	; 0x40
 8003c2c:	d005      	beq.n	8003c3a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c32:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d04f      	beq.n	8003cda <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 fee9 	bl	8004a12 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4a:	2b40      	cmp	r3, #64	; 0x40
 8003c4c:	d141      	bne.n	8003cd2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	3308      	adds	r3, #8
 8003c54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c5c:	e853 3f00 	ldrex	r3, [r3]
 8003c60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3308      	adds	r3, #8
 8003c76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c8a:	e841 2300 	strex	r3, r2, [r1]
 8003c8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1d9      	bne.n	8003c4e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d013      	beq.n	8003cca <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ca6:	4a14      	ldr	r2, [pc, #80]	; (8003cf8 <HAL_UART_IRQHandler+0x2b8>)
 8003ca8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7fd fa9e 	bl	80011f0 <HAL_DMA_Abort_IT>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d017      	beq.n	8003cea <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc8:	e00f      	b.n	8003cea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f9da 	bl	8004084 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd0:	e00b      	b.n	8003cea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f9d6 	bl	8004084 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd8:	e007      	b.n	8003cea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f9d2 	bl	8004084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8003ce8:	e1b7      	b.n	800405a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cea:	bf00      	nop
    return;
 8003cec:	e1b5      	b.n	800405a <HAL_UART_IRQHandler+0x61a>
 8003cee:	bf00      	nop
 8003cf0:	10000001 	.word	0x10000001
 8003cf4:	04000120 	.word	0x04000120
 8003cf8:	08004adf 	.word	0x08004adf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	f040 814a 	bne.w	8003f9a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d0a:	f003 0310 	and.w	r3, r3, #16
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 8143 	beq.w	8003f9a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d18:	f003 0310 	and.w	r3, r3, #16
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 813c 	beq.w	8003f9a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2210      	movs	r2, #16
 8003d28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d34:	2b40      	cmp	r3, #64	; 0x40
 8003d36:	f040 80b5 	bne.w	8003ea4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d46:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 8187 	beq.w	800405e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003d56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	f080 817f 	bcs.w	800405e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d66:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0320 	and.w	r3, r3, #32
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f040 8086 	bne.w	8003e88 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d88:	e853 3f00 	ldrex	r3, [r3]
 8003d8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	461a      	mov	r2, r3
 8003da2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003da6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003daa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003db2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003db6:	e841 2300 	strex	r3, r2, [r1]
 8003dba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003dbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1da      	bne.n	8003d7c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3308      	adds	r3, #8
 8003dcc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dd0:	e853 3f00 	ldrex	r3, [r3]
 8003dd4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003dd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dd8:	f023 0301 	bic.w	r3, r3, #1
 8003ddc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3308      	adds	r3, #8
 8003de6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003dea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003dee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003df2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003df6:	e841 2300 	strex	r3, r2, [r1]
 8003dfa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003dfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1e1      	bne.n	8003dc6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	3308      	adds	r3, #8
 8003e08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e0c:	e853 3f00 	ldrex	r3, [r3]
 8003e10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	3308      	adds	r3, #8
 8003e22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e2e:	e841 2300 	strex	r3, r2, [r1]
 8003e32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1e3      	bne.n	8003e02 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e50:	e853 3f00 	ldrex	r3, [r3]
 8003e54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e58:	f023 0310 	bic.w	r3, r3, #16
 8003e5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	461a      	mov	r2, r3
 8003e66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e6c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e72:	e841 2300 	strex	r3, r2, [r1]
 8003e76:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1e4      	bne.n	8003e48 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fd f95b 	bl	800113e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f8fb 	bl	8004098 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ea2:	e0dc      	b.n	800405e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 80ce 	beq.w	8004062 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8003ec6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 80c9 	beq.w	8004062 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed8:	e853 3f00 	ldrex	r3, [r3]
 8003edc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ee0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ee4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	461a      	mov	r2, r3
 8003eee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ef2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ef4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ef8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003efa:	e841 2300 	strex	r3, r2, [r1]
 8003efe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1e4      	bne.n	8003ed0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	3308      	adds	r3, #8
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	e853 3f00 	ldrex	r3, [r3]
 8003f14:	623b      	str	r3, [r7, #32]
   return(result);
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f1c:	f023 0301 	bic.w	r3, r3, #1
 8003f20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3308      	adds	r3, #8
 8003f2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f2e:	633a      	str	r2, [r7, #48]	; 0x30
 8003f30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f36:	e841 2300 	strex	r3, r2, [r1]
 8003f3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1e1      	bne.n	8003f06 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2220      	movs	r2, #32
 8003f46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	e853 3f00 	ldrex	r3, [r3]
 8003f62:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 0310 	bic.w	r3, r3, #16
 8003f6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	461a      	mov	r2, r3
 8003f74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f78:	61fb      	str	r3, [r7, #28]
 8003f7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7c:	69b9      	ldr	r1, [r7, #24]
 8003f7e:	69fa      	ldr	r2, [r7, #28]
 8003f80:	e841 2300 	strex	r3, r2, [r1]
 8003f84:	617b      	str	r3, [r7, #20]
   return(result);
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e4      	bne.n	8003f56 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f90:	4619      	mov	r1, r3
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f880 	bl	8004098 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f98:	e063      	b.n	8004062 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00e      	beq.n	8003fc4 <HAL_UART_IRQHandler+0x584>
 8003fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d008      	beq.n	8003fc4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003fba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 ff71 	bl	8004ea4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003fc2:	e051      	b.n	8004068 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d014      	beq.n	8003ffa <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d105      	bne.n	8003fe8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003fdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fe0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d008      	beq.n	8003ffa <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d03a      	beq.n	8004066 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	4798      	blx	r3
    }
    return;
 8003ff8:	e035      	b.n	8004066 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004002:	2b00      	cmp	r3, #0
 8004004:	d009      	beq.n	800401a <HAL_UART_IRQHandler+0x5da>
 8004006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800400a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 ff1b 	bl	8004e4e <UART_EndTransmit_IT>
    return;
 8004018:	e026      	b.n	8004068 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800401a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800401e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d009      	beq.n	800403a <HAL_UART_IRQHandler+0x5fa>
 8004026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800402a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 ff4a 	bl	8004ecc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004038:	e016      	b.n	8004068 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800403a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800403e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d010      	beq.n	8004068 <HAL_UART_IRQHandler+0x628>
 8004046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800404a:	2b00      	cmp	r3, #0
 800404c:	da0c      	bge.n	8004068 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 ff32 	bl	8004eb8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004054:	e008      	b.n	8004068 <HAL_UART_IRQHandler+0x628>
      return;
 8004056:	bf00      	nop
 8004058:	e006      	b.n	8004068 <HAL_UART_IRQHandler+0x628>
    return;
 800405a:	bf00      	nop
 800405c:	e004      	b.n	8004068 <HAL_UART_IRQHandler+0x628>
      return;
 800405e:	bf00      	nop
 8004060:	e002      	b.n	8004068 <HAL_UART_IRQHandler+0x628>
      return;
 8004062:	bf00      	nop
 8004064:	e000      	b.n	8004068 <HAL_UART_IRQHandler+0x628>
    return;
 8004066:	bf00      	nop
  }
}
 8004068:	37e8      	adds	r7, #232	; 0xe8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop

08004070 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	460b      	mov	r3, r1
 80040a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040b4:	b08c      	sub	sp, #48	; 0x30
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	431a      	orrs	r2, r3
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	431a      	orrs	r2, r3
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	4baa      	ldr	r3, [pc, #680]	; (8004388 <UART_SetConfig+0x2d8>)
 80040e0:	4013      	ands	r3, r2
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	6812      	ldr	r2, [r2, #0]
 80040e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040e8:	430b      	orrs	r3, r1
 80040ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a9f      	ldr	r2, [pc, #636]	; (800438c <UART_SetConfig+0x2dc>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d004      	beq.n	800411c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004118:	4313      	orrs	r3, r2
 800411a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004126:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	6812      	ldr	r2, [r2, #0]
 800412e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004130:	430b      	orrs	r3, r1
 8004132:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413a:	f023 010f 	bic.w	r1, r3, #15
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a90      	ldr	r2, [pc, #576]	; (8004390 <UART_SetConfig+0x2e0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d125      	bne.n	80041a0 <UART_SetConfig+0xf0>
 8004154:	4b8f      	ldr	r3, [pc, #572]	; (8004394 <UART_SetConfig+0x2e4>)
 8004156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	2b03      	cmp	r3, #3
 8004160:	d81a      	bhi.n	8004198 <UART_SetConfig+0xe8>
 8004162:	a201      	add	r2, pc, #4	; (adr r2, 8004168 <UART_SetConfig+0xb8>)
 8004164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004168:	08004179 	.word	0x08004179
 800416c:	08004189 	.word	0x08004189
 8004170:	08004181 	.word	0x08004181
 8004174:	08004191 	.word	0x08004191
 8004178:	2301      	movs	r3, #1
 800417a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800417e:	e116      	b.n	80043ae <UART_SetConfig+0x2fe>
 8004180:	2302      	movs	r3, #2
 8004182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004186:	e112      	b.n	80043ae <UART_SetConfig+0x2fe>
 8004188:	2304      	movs	r3, #4
 800418a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800418e:	e10e      	b.n	80043ae <UART_SetConfig+0x2fe>
 8004190:	2308      	movs	r3, #8
 8004192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004196:	e10a      	b.n	80043ae <UART_SetConfig+0x2fe>
 8004198:	2310      	movs	r3, #16
 800419a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800419e:	e106      	b.n	80043ae <UART_SetConfig+0x2fe>
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a7c      	ldr	r2, [pc, #496]	; (8004398 <UART_SetConfig+0x2e8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d138      	bne.n	800421c <UART_SetConfig+0x16c>
 80041aa:	4b7a      	ldr	r3, [pc, #488]	; (8004394 <UART_SetConfig+0x2e4>)
 80041ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b0:	f003 030c 	and.w	r3, r3, #12
 80041b4:	2b0c      	cmp	r3, #12
 80041b6:	d82d      	bhi.n	8004214 <UART_SetConfig+0x164>
 80041b8:	a201      	add	r2, pc, #4	; (adr r2, 80041c0 <UART_SetConfig+0x110>)
 80041ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041be:	bf00      	nop
 80041c0:	080041f5 	.word	0x080041f5
 80041c4:	08004215 	.word	0x08004215
 80041c8:	08004215 	.word	0x08004215
 80041cc:	08004215 	.word	0x08004215
 80041d0:	08004205 	.word	0x08004205
 80041d4:	08004215 	.word	0x08004215
 80041d8:	08004215 	.word	0x08004215
 80041dc:	08004215 	.word	0x08004215
 80041e0:	080041fd 	.word	0x080041fd
 80041e4:	08004215 	.word	0x08004215
 80041e8:	08004215 	.word	0x08004215
 80041ec:	08004215 	.word	0x08004215
 80041f0:	0800420d 	.word	0x0800420d
 80041f4:	2300      	movs	r3, #0
 80041f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041fa:	e0d8      	b.n	80043ae <UART_SetConfig+0x2fe>
 80041fc:	2302      	movs	r3, #2
 80041fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004202:	e0d4      	b.n	80043ae <UART_SetConfig+0x2fe>
 8004204:	2304      	movs	r3, #4
 8004206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800420a:	e0d0      	b.n	80043ae <UART_SetConfig+0x2fe>
 800420c:	2308      	movs	r3, #8
 800420e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004212:	e0cc      	b.n	80043ae <UART_SetConfig+0x2fe>
 8004214:	2310      	movs	r3, #16
 8004216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800421a:	e0c8      	b.n	80043ae <UART_SetConfig+0x2fe>
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a5e      	ldr	r2, [pc, #376]	; (800439c <UART_SetConfig+0x2ec>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d125      	bne.n	8004272 <UART_SetConfig+0x1c2>
 8004226:	4b5b      	ldr	r3, [pc, #364]	; (8004394 <UART_SetConfig+0x2e4>)
 8004228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004230:	2b30      	cmp	r3, #48	; 0x30
 8004232:	d016      	beq.n	8004262 <UART_SetConfig+0x1b2>
 8004234:	2b30      	cmp	r3, #48	; 0x30
 8004236:	d818      	bhi.n	800426a <UART_SetConfig+0x1ba>
 8004238:	2b20      	cmp	r3, #32
 800423a:	d00a      	beq.n	8004252 <UART_SetConfig+0x1a2>
 800423c:	2b20      	cmp	r3, #32
 800423e:	d814      	bhi.n	800426a <UART_SetConfig+0x1ba>
 8004240:	2b00      	cmp	r3, #0
 8004242:	d002      	beq.n	800424a <UART_SetConfig+0x19a>
 8004244:	2b10      	cmp	r3, #16
 8004246:	d008      	beq.n	800425a <UART_SetConfig+0x1aa>
 8004248:	e00f      	b.n	800426a <UART_SetConfig+0x1ba>
 800424a:	2300      	movs	r3, #0
 800424c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004250:	e0ad      	b.n	80043ae <UART_SetConfig+0x2fe>
 8004252:	2302      	movs	r3, #2
 8004254:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004258:	e0a9      	b.n	80043ae <UART_SetConfig+0x2fe>
 800425a:	2304      	movs	r3, #4
 800425c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004260:	e0a5      	b.n	80043ae <UART_SetConfig+0x2fe>
 8004262:	2308      	movs	r3, #8
 8004264:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004268:	e0a1      	b.n	80043ae <UART_SetConfig+0x2fe>
 800426a:	2310      	movs	r3, #16
 800426c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004270:	e09d      	b.n	80043ae <UART_SetConfig+0x2fe>
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a4a      	ldr	r2, [pc, #296]	; (80043a0 <UART_SetConfig+0x2f0>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d125      	bne.n	80042c8 <UART_SetConfig+0x218>
 800427c:	4b45      	ldr	r3, [pc, #276]	; (8004394 <UART_SetConfig+0x2e4>)
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004282:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004286:	2bc0      	cmp	r3, #192	; 0xc0
 8004288:	d016      	beq.n	80042b8 <UART_SetConfig+0x208>
 800428a:	2bc0      	cmp	r3, #192	; 0xc0
 800428c:	d818      	bhi.n	80042c0 <UART_SetConfig+0x210>
 800428e:	2b80      	cmp	r3, #128	; 0x80
 8004290:	d00a      	beq.n	80042a8 <UART_SetConfig+0x1f8>
 8004292:	2b80      	cmp	r3, #128	; 0x80
 8004294:	d814      	bhi.n	80042c0 <UART_SetConfig+0x210>
 8004296:	2b00      	cmp	r3, #0
 8004298:	d002      	beq.n	80042a0 <UART_SetConfig+0x1f0>
 800429a:	2b40      	cmp	r3, #64	; 0x40
 800429c:	d008      	beq.n	80042b0 <UART_SetConfig+0x200>
 800429e:	e00f      	b.n	80042c0 <UART_SetConfig+0x210>
 80042a0:	2300      	movs	r3, #0
 80042a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042a6:	e082      	b.n	80043ae <UART_SetConfig+0x2fe>
 80042a8:	2302      	movs	r3, #2
 80042aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042ae:	e07e      	b.n	80043ae <UART_SetConfig+0x2fe>
 80042b0:	2304      	movs	r3, #4
 80042b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042b6:	e07a      	b.n	80043ae <UART_SetConfig+0x2fe>
 80042b8:	2308      	movs	r3, #8
 80042ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042be:	e076      	b.n	80043ae <UART_SetConfig+0x2fe>
 80042c0:	2310      	movs	r3, #16
 80042c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042c6:	e072      	b.n	80043ae <UART_SetConfig+0x2fe>
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a35      	ldr	r2, [pc, #212]	; (80043a4 <UART_SetConfig+0x2f4>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d12a      	bne.n	8004328 <UART_SetConfig+0x278>
 80042d2:	4b30      	ldr	r3, [pc, #192]	; (8004394 <UART_SetConfig+0x2e4>)
 80042d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042e0:	d01a      	beq.n	8004318 <UART_SetConfig+0x268>
 80042e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042e6:	d81b      	bhi.n	8004320 <UART_SetConfig+0x270>
 80042e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ec:	d00c      	beq.n	8004308 <UART_SetConfig+0x258>
 80042ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f2:	d815      	bhi.n	8004320 <UART_SetConfig+0x270>
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <UART_SetConfig+0x250>
 80042f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042fc:	d008      	beq.n	8004310 <UART_SetConfig+0x260>
 80042fe:	e00f      	b.n	8004320 <UART_SetConfig+0x270>
 8004300:	2300      	movs	r3, #0
 8004302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004306:	e052      	b.n	80043ae <UART_SetConfig+0x2fe>
 8004308:	2302      	movs	r3, #2
 800430a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800430e:	e04e      	b.n	80043ae <UART_SetConfig+0x2fe>
 8004310:	2304      	movs	r3, #4
 8004312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004316:	e04a      	b.n	80043ae <UART_SetConfig+0x2fe>
 8004318:	2308      	movs	r3, #8
 800431a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800431e:	e046      	b.n	80043ae <UART_SetConfig+0x2fe>
 8004320:	2310      	movs	r3, #16
 8004322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004326:	e042      	b.n	80043ae <UART_SetConfig+0x2fe>
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a17      	ldr	r2, [pc, #92]	; (800438c <UART_SetConfig+0x2dc>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d13a      	bne.n	80043a8 <UART_SetConfig+0x2f8>
 8004332:	4b18      	ldr	r3, [pc, #96]	; (8004394 <UART_SetConfig+0x2e4>)
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004338:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800433c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004340:	d01a      	beq.n	8004378 <UART_SetConfig+0x2c8>
 8004342:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004346:	d81b      	bhi.n	8004380 <UART_SetConfig+0x2d0>
 8004348:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800434c:	d00c      	beq.n	8004368 <UART_SetConfig+0x2b8>
 800434e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004352:	d815      	bhi.n	8004380 <UART_SetConfig+0x2d0>
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <UART_SetConfig+0x2b0>
 8004358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800435c:	d008      	beq.n	8004370 <UART_SetConfig+0x2c0>
 800435e:	e00f      	b.n	8004380 <UART_SetConfig+0x2d0>
 8004360:	2300      	movs	r3, #0
 8004362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004366:	e022      	b.n	80043ae <UART_SetConfig+0x2fe>
 8004368:	2302      	movs	r3, #2
 800436a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800436e:	e01e      	b.n	80043ae <UART_SetConfig+0x2fe>
 8004370:	2304      	movs	r3, #4
 8004372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004376:	e01a      	b.n	80043ae <UART_SetConfig+0x2fe>
 8004378:	2308      	movs	r3, #8
 800437a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800437e:	e016      	b.n	80043ae <UART_SetConfig+0x2fe>
 8004380:	2310      	movs	r3, #16
 8004382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004386:	e012      	b.n	80043ae <UART_SetConfig+0x2fe>
 8004388:	cfff69f3 	.word	0xcfff69f3
 800438c:	40008000 	.word	0x40008000
 8004390:	40013800 	.word	0x40013800
 8004394:	40021000 	.word	0x40021000
 8004398:	40004400 	.word	0x40004400
 800439c:	40004800 	.word	0x40004800
 80043a0:	40004c00 	.word	0x40004c00
 80043a4:	40005000 	.word	0x40005000
 80043a8:	2310      	movs	r3, #16
 80043aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4aae      	ldr	r2, [pc, #696]	; (800466c <UART_SetConfig+0x5bc>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	f040 8097 	bne.w	80044e8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d823      	bhi.n	800440a <UART_SetConfig+0x35a>
 80043c2:	a201      	add	r2, pc, #4	; (adr r2, 80043c8 <UART_SetConfig+0x318>)
 80043c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c8:	080043ed 	.word	0x080043ed
 80043cc:	0800440b 	.word	0x0800440b
 80043d0:	080043f5 	.word	0x080043f5
 80043d4:	0800440b 	.word	0x0800440b
 80043d8:	080043fb 	.word	0x080043fb
 80043dc:	0800440b 	.word	0x0800440b
 80043e0:	0800440b 	.word	0x0800440b
 80043e4:	0800440b 	.word	0x0800440b
 80043e8:	08004403 	.word	0x08004403
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043ec:	f7fd fe68 	bl	80020c0 <HAL_RCC_GetPCLK1Freq>
 80043f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80043f2:	e010      	b.n	8004416 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043f4:	4b9e      	ldr	r3, [pc, #632]	; (8004670 <UART_SetConfig+0x5c0>)
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80043f8:	e00d      	b.n	8004416 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043fa:	f7fd fdf3 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 80043fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004400:	e009      	b.n	8004416 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004406:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004408:	e005      	b.n	8004416 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004414:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 8130 	beq.w	800467e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	4a94      	ldr	r2, [pc, #592]	; (8004674 <UART_SetConfig+0x5c4>)
 8004424:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004428:	461a      	mov	r2, r3
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004430:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	4613      	mov	r3, r2
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	4413      	add	r3, r2
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	429a      	cmp	r2, r3
 8004440:	d305      	bcc.n	800444e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	429a      	cmp	r2, r3
 800444c:	d903      	bls.n	8004456 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004454:	e113      	b.n	800467e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	2200      	movs	r2, #0
 800445a:	60bb      	str	r3, [r7, #8]
 800445c:	60fa      	str	r2, [r7, #12]
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	4a84      	ldr	r2, [pc, #528]	; (8004674 <UART_SetConfig+0x5c4>)
 8004464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004468:	b29b      	uxth	r3, r3
 800446a:	2200      	movs	r2, #0
 800446c:	603b      	str	r3, [r7, #0]
 800446e:	607a      	str	r2, [r7, #4]
 8004470:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004474:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004478:	f7fb ff22 	bl	80002c0 <__aeabi_uldivmod>
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
 8004480:	4610      	mov	r0, r2
 8004482:	4619      	mov	r1, r3
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	f04f 0300 	mov.w	r3, #0
 800448c:	020b      	lsls	r3, r1, #8
 800448e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004492:	0202      	lsls	r2, r0, #8
 8004494:	6979      	ldr	r1, [r7, #20]
 8004496:	6849      	ldr	r1, [r1, #4]
 8004498:	0849      	lsrs	r1, r1, #1
 800449a:	2000      	movs	r0, #0
 800449c:	460c      	mov	r4, r1
 800449e:	4605      	mov	r5, r0
 80044a0:	eb12 0804 	adds.w	r8, r2, r4
 80044a4:	eb43 0905 	adc.w	r9, r3, r5
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	469a      	mov	sl, r3
 80044b0:	4693      	mov	fp, r2
 80044b2:	4652      	mov	r2, sl
 80044b4:	465b      	mov	r3, fp
 80044b6:	4640      	mov	r0, r8
 80044b8:	4649      	mov	r1, r9
 80044ba:	f7fb ff01 	bl	80002c0 <__aeabi_uldivmod>
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	4613      	mov	r3, r2
 80044c4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044cc:	d308      	bcc.n	80044e0 <UART_SetConfig+0x430>
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044d4:	d204      	bcs.n	80044e0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6a3a      	ldr	r2, [r7, #32]
 80044dc:	60da      	str	r2, [r3, #12]
 80044de:	e0ce      	b.n	800467e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80044e6:	e0ca      	b.n	800467e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044f0:	d166      	bne.n	80045c0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80044f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d827      	bhi.n	800454a <UART_SetConfig+0x49a>
 80044fa:	a201      	add	r2, pc, #4	; (adr r2, 8004500 <UART_SetConfig+0x450>)
 80044fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004500:	08004525 	.word	0x08004525
 8004504:	0800452d 	.word	0x0800452d
 8004508:	08004535 	.word	0x08004535
 800450c:	0800454b 	.word	0x0800454b
 8004510:	0800453b 	.word	0x0800453b
 8004514:	0800454b 	.word	0x0800454b
 8004518:	0800454b 	.word	0x0800454b
 800451c:	0800454b 	.word	0x0800454b
 8004520:	08004543 	.word	0x08004543
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004524:	f7fd fdcc 	bl	80020c0 <HAL_RCC_GetPCLK1Freq>
 8004528:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800452a:	e014      	b.n	8004556 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800452c:	f7fd fdde 	bl	80020ec <HAL_RCC_GetPCLK2Freq>
 8004530:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004532:	e010      	b.n	8004556 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004534:	4b4e      	ldr	r3, [pc, #312]	; (8004670 <UART_SetConfig+0x5c0>)
 8004536:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004538:	e00d      	b.n	8004556 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800453a:	f7fd fd53 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 800453e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004540:	e009      	b.n	8004556 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004548:	e005      	b.n	8004556 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800454a:	2300      	movs	r3, #0
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004554:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 8090 	beq.w	800467e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	4a44      	ldr	r2, [pc, #272]	; (8004674 <UART_SetConfig+0x5c4>)
 8004564:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004568:	461a      	mov	r2, r3
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004570:	005a      	lsls	r2, r3, #1
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	085b      	lsrs	r3, r3, #1
 8004578:	441a      	add	r2, r3
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004582:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	2b0f      	cmp	r3, #15
 8004588:	d916      	bls.n	80045b8 <UART_SetConfig+0x508>
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004590:	d212      	bcs.n	80045b8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	b29b      	uxth	r3, r3
 8004596:	f023 030f 	bic.w	r3, r3, #15
 800459a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	085b      	lsrs	r3, r3, #1
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	8bfb      	ldrh	r3, [r7, #30]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	8bfa      	ldrh	r2, [r7, #30]
 80045b4:	60da      	str	r2, [r3, #12]
 80045b6:	e062      	b.n	800467e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80045be:	e05e      	b.n	800467e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d828      	bhi.n	800461a <UART_SetConfig+0x56a>
 80045c8:	a201      	add	r2, pc, #4	; (adr r2, 80045d0 <UART_SetConfig+0x520>)
 80045ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ce:	bf00      	nop
 80045d0:	080045f5 	.word	0x080045f5
 80045d4:	080045fd 	.word	0x080045fd
 80045d8:	08004605 	.word	0x08004605
 80045dc:	0800461b 	.word	0x0800461b
 80045e0:	0800460b 	.word	0x0800460b
 80045e4:	0800461b 	.word	0x0800461b
 80045e8:	0800461b 	.word	0x0800461b
 80045ec:	0800461b 	.word	0x0800461b
 80045f0:	08004613 	.word	0x08004613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045f4:	f7fd fd64 	bl	80020c0 <HAL_RCC_GetPCLK1Freq>
 80045f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045fa:	e014      	b.n	8004626 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045fc:	f7fd fd76 	bl	80020ec <HAL_RCC_GetPCLK2Freq>
 8004600:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004602:	e010      	b.n	8004626 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004604:	4b1a      	ldr	r3, [pc, #104]	; (8004670 <UART_SetConfig+0x5c0>)
 8004606:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004608:	e00d      	b.n	8004626 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800460a:	f7fd fceb 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 800460e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004610:	e009      	b.n	8004626 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004618:	e005      	b.n	8004626 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004624:	bf00      	nop
    }

    if (pclk != 0U)
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	2b00      	cmp	r3, #0
 800462a:	d028      	beq.n	800467e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	4a10      	ldr	r2, [pc, #64]	; (8004674 <UART_SetConfig+0x5c4>)
 8004632:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004636:	461a      	mov	r2, r3
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	fbb3 f2f2 	udiv	r2, r3, r2
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	085b      	lsrs	r3, r3, #1
 8004644:	441a      	add	r2, r3
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	fbb2 f3f3 	udiv	r3, r2, r3
 800464e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	2b0f      	cmp	r3, #15
 8004654:	d910      	bls.n	8004678 <UART_SetConfig+0x5c8>
 8004656:	6a3b      	ldr	r3, [r7, #32]
 8004658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800465c:	d20c      	bcs.n	8004678 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	b29a      	uxth	r2, r3
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	60da      	str	r2, [r3, #12]
 8004668:	e009      	b.n	800467e <UART_SetConfig+0x5ce>
 800466a:	bf00      	nop
 800466c:	40008000 	.word	0x40008000
 8004670:	00f42400 	.word	0x00f42400
 8004674:	08005a84 	.word	0x08005a84
      }
      else
      {
        ret = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2201      	movs	r2, #1
 8004682:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2201      	movs	r2, #1
 800468a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	2200      	movs	r2, #0
 8004692:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	2200      	movs	r2, #0
 8004698:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800469a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3730      	adds	r7, #48	; 0x30
 80046a2:	46bd      	mov	sp, r7
 80046a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080046a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00a      	beq.n	80046d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00a      	beq.n	80046f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00a      	beq.n	8004716 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473c:	f003 0310 	and.w	r3, r3, #16
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00a      	beq.n	800475a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475e:	f003 0320 	and.w	r3, r3, #32
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004784:	2b00      	cmp	r3, #0
 8004786:	d01a      	beq.n	80047be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047a6:	d10a      	bne.n	80047be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00a      	beq.n	80047e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	605a      	str	r2, [r3, #4]
  }
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af02      	add	r7, sp, #8
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047fc:	f7fc fb62 	bl	8000ec4 <HAL_GetTick>
 8004800:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0308 	and.w	r3, r3, #8
 800480c:	2b08      	cmp	r3, #8
 800480e:	d10e      	bne.n	800482e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004810:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f82f 	bl	8004882 <UART_WaitOnFlagUntilTimeout>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e025      	b.n	800487a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b04      	cmp	r3, #4
 800483a:	d10e      	bne.n	800485a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800483c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f819 	bl	8004882 <UART_WaitOnFlagUntilTimeout>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e00f      	b.n	800487a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2220      	movs	r2, #32
 800485e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2220      	movs	r2, #32
 8004866:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b09c      	sub	sp, #112	; 0x70
 8004886:	af00      	add	r7, sp, #0
 8004888:	60f8      	str	r0, [r7, #12]
 800488a:	60b9      	str	r1, [r7, #8]
 800488c:	603b      	str	r3, [r7, #0]
 800488e:	4613      	mov	r3, r2
 8004890:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004892:	e0a9      	b.n	80049e8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004894:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489a:	f000 80a5 	beq.w	80049e8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800489e:	f7fc fb11 	bl	8000ec4 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d302      	bcc.n	80048b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80048ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d140      	bne.n	8004936 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048bc:	e853 3f00 	ldrex	r3, [r3]
 80048c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80048c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048c8:	667b      	str	r3, [r7, #100]	; 0x64
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	461a      	mov	r2, r3
 80048d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048d4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80048d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048da:	e841 2300 	strex	r3, r2, [r1]
 80048de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80048e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1e6      	bne.n	80048b4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	3308      	adds	r3, #8
 80048ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048f0:	e853 3f00 	ldrex	r3, [r3]
 80048f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f8:	f023 0301 	bic.w	r3, r3, #1
 80048fc:	663b      	str	r3, [r7, #96]	; 0x60
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3308      	adds	r3, #8
 8004904:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004906:	64ba      	str	r2, [r7, #72]	; 0x48
 8004908:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800490c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800490e:	e841 2300 	strex	r3, r2, [r1]
 8004912:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1e5      	bne.n	80048e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2220      	movs	r2, #32
 800491e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2220      	movs	r2, #32
 8004926:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e069      	b.n	8004a0a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	d051      	beq.n	80049e8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800494e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004952:	d149      	bne.n	80049e8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800495c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	e853 3f00 	ldrex	r3, [r3]
 800496a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004972:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	461a      	mov	r2, r3
 800497a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800497c:	637b      	str	r3, [r7, #52]	; 0x34
 800497e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004980:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004982:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004984:	e841 2300 	strex	r3, r2, [r1]
 8004988:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800498a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1e6      	bne.n	800495e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3308      	adds	r3, #8
 8004996:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	e853 3f00 	ldrex	r3, [r3]
 800499e:	613b      	str	r3, [r7, #16]
   return(result);
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f023 0301 	bic.w	r3, r3, #1
 80049a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3308      	adds	r3, #8
 80049ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80049b0:	623a      	str	r2, [r7, #32]
 80049b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b4:	69f9      	ldr	r1, [r7, #28]
 80049b6:	6a3a      	ldr	r2, [r7, #32]
 80049b8:	e841 2300 	strex	r3, r2, [r1]
 80049bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1e5      	bne.n	8004990 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e010      	b.n	8004a0a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	69da      	ldr	r2, [r3, #28]
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	4013      	ands	r3, r2
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	bf0c      	ite	eq
 80049f8:	2301      	moveq	r3, #1
 80049fa:	2300      	movne	r3, #0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	461a      	mov	r2, r3
 8004a00:	79fb      	ldrb	r3, [r7, #7]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	f43f af46 	beq.w	8004894 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3770      	adds	r7, #112	; 0x70
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b095      	sub	sp, #84	; 0x54
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a22:	e853 3f00 	ldrex	r3, [r3]
 8004a26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	461a      	mov	r2, r3
 8004a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a38:	643b      	str	r3, [r7, #64]	; 0x40
 8004a3a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a40:	e841 2300 	strex	r3, r2, [r1]
 8004a44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1e6      	bne.n	8004a1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3308      	adds	r3, #8
 8004a52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	e853 3f00 	ldrex	r3, [r3]
 8004a5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a62:	f023 0301 	bic.w	r3, r3, #1
 8004a66:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3308      	adds	r3, #8
 8004a6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a78:	e841 2300 	strex	r3, r2, [r1]
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1e3      	bne.n	8004a4c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d118      	bne.n	8004abe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	e853 3f00 	ldrex	r3, [r3]
 8004a98:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	f023 0310 	bic.w	r3, r3, #16
 8004aa0:	647b      	str	r3, [r7, #68]	; 0x44
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aaa:	61bb      	str	r3, [r7, #24]
 8004aac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aae:	6979      	ldr	r1, [r7, #20]
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	e841 2300 	strex	r3, r2, [r1]
 8004ab6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1e6      	bne.n	8004a8c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004ad2:	bf00      	nop
 8004ad4:	3754      	adds	r7, #84	; 0x54
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b084      	sub	sp, #16
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f7ff fac1 	bl	8004084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b02:	bf00      	nop
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b08f      	sub	sp, #60	; 0x3c
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b18:	2b21      	cmp	r3, #33	; 0x21
 8004b1a:	d14c      	bne.n	8004bb6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d132      	bne.n	8004b8e <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	e853 3f00 	ldrex	r3, [r3]
 8004b34:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	461a      	mov	r2, r3
 8004b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b48:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b4e:	e841 2300 	strex	r3, r2, [r1]
 8004b52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1e6      	bne.n	8004b28 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	e853 3f00 	ldrex	r3, [r3]
 8004b66:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b6e:	633b      	str	r3, [r7, #48]	; 0x30
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	461a      	mov	r2, r3
 8004b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b78:	61bb      	str	r3, [r7, #24]
 8004b7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7c:	6979      	ldr	r1, [r7, #20]
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	e841 2300 	strex	r3, r2, [r1]
 8004b84:	613b      	str	r3, [r7, #16]
   return(result);
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1e6      	bne.n	8004b5a <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004b8c:	e013      	b.n	8004bb6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b92:	781a      	ldrb	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	3b01      	subs	r3, #1
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8004bb6:	bf00      	nop
 8004bb8:	373c      	adds	r7, #60	; 0x3c
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b091      	sub	sp, #68	; 0x44
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bd0:	2b21      	cmp	r3, #33	; 0x21
 8004bd2:	d151      	bne.n	8004c78 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d132      	bne.n	8004c46 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	e853 3f00 	ldrex	r3, [r3]
 8004bec:	623b      	str	r3, [r7, #32]
   return(result);
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bf4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfe:	633b      	str	r3, [r7, #48]	; 0x30
 8004c00:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c06:	e841 2300 	strex	r3, r2, [r1]
 8004c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1e6      	bne.n	8004be0 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	e853 3f00 	ldrex	r3, [r3]
 8004c1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c26:	637b      	str	r3, [r7, #52]	; 0x34
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c30:	61fb      	str	r3, [r7, #28]
 8004c32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c34:	69b9      	ldr	r1, [r7, #24]
 8004c36:	69fa      	ldr	r2, [r7, #28]
 8004c38:	e841 2300 	strex	r3, r2, [r1]
 8004c3c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1e6      	bne.n	8004c12 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004c44:	e018      	b.n	8004c78 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c4e:	881b      	ldrh	r3, [r3, #0]
 8004c50:	461a      	mov	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c5a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c60:	1c9a      	adds	r2, r3, #2
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8004c78:	bf00      	nop
 8004c7a:	3744      	adds	r7, #68	; 0x44
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b091      	sub	sp, #68	; 0x44
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c92:	2b21      	cmp	r3, #33	; 0x21
 8004c94:	d160      	bne.n	8004d58 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004c9c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004c9e:	e057      	b.n	8004d50 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d133      	bne.n	8004d14 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	3308      	adds	r3, #8
 8004cb2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	e853 3f00 	ldrex	r3, [r3]
 8004cba:	623b      	str	r3, [r7, #32]
   return(result);
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004cc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3308      	adds	r3, #8
 8004cca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ccc:	633a      	str	r2, [r7, #48]	; 0x30
 8004cce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cd4:	e841 2300 	strex	r3, r2, [r1]
 8004cd8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e5      	bne.n	8004cac <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	e853 3f00 	ldrex	r3, [r3]
 8004cec:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cf4:	637b      	str	r3, [r7, #52]	; 0x34
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfe:	61fb      	str	r3, [r7, #28]
 8004d00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d02:	69b9      	ldr	r1, [r7, #24]
 8004d04:	69fa      	ldr	r2, [r7, #28]
 8004d06:	e841 2300 	strex	r3, r2, [r1]
 8004d0a:	617b      	str	r3, [r7, #20]
   return(result);
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1e6      	bne.n	8004ce0 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004d12:	e021      	b.n	8004d58 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d013      	beq.n	8004d4a <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d26:	781a      	ldrb	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004d4a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004d50:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1a4      	bne.n	8004ca0 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004d56:	e7ff      	b.n	8004d58 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8004d58:	bf00      	nop
 8004d5a:	3744      	adds	r7, #68	; 0x44
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b091      	sub	sp, #68	; 0x44
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d72:	2b21      	cmp	r3, #33	; 0x21
 8004d74:	d165      	bne.n	8004e42 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004d7c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004d7e:	e05c      	b.n	8004e3a <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d133      	bne.n	8004df4 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3308      	adds	r3, #8
 8004d92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	e853 3f00 	ldrex	r3, [r3]
 8004d9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004da2:	637b      	str	r3, [r7, #52]	; 0x34
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3308      	adds	r3, #8
 8004daa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004db2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004db4:	e841 2300 	strex	r3, r2, [r1]
 8004db8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e5      	bne.n	8004d8c <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	e853 3f00 	ldrex	r3, [r3]
 8004dcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dd4:	633b      	str	r3, [r7, #48]	; 0x30
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dde:	61bb      	str	r3, [r7, #24]
 8004de0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de2:	6979      	ldr	r1, [r7, #20]
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	e841 2300 	strex	r3, r2, [r1]
 8004dea:	613b      	str	r3, [r7, #16]
   return(result);
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1e6      	bne.n	8004dc0 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004df2:	e026      	b.n	8004e42 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d018      	beq.n	8004e34 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e06:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e16:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e1c:	1c9a      	adds	r2, r3, #2
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004e34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004e36:	3b01      	subs	r3, #1
 8004e38:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004e3a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d19f      	bne.n	8004d80 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004e40:	e7ff      	b.n	8004e42 <UART_TxISR_16BIT_FIFOEN+0xde>
 8004e42:	bf00      	nop
 8004e44:	3744      	adds	r7, #68	; 0x44
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b088      	sub	sp, #32
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	e853 3f00 	ldrex	r3, [r3]
 8004e62:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e6a:	61fb      	str	r3, [r7, #28]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	461a      	mov	r2, r3
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	61bb      	str	r3, [r7, #24]
 8004e76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e78:	6979      	ldr	r1, [r7, #20]
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	e841 2300 	strex	r3, r2, [r1]
 8004e80:	613b      	str	r3, [r7, #16]
   return(result);
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1e6      	bne.n	8004e56 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7ff f8ea 	bl	8004070 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e9c:	bf00      	nop
 8004e9e:	3720      	adds	r7, #32
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d101      	bne.n	8004ef6 <HAL_UARTEx_DisableFifoMode+0x16>
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	e027      	b.n	8004f46 <HAL_UARTEx_DisableFifoMode+0x66>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2224      	movs	r2, #36	; 0x24
 8004f02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 0201 	bic.w	r2, r2, #1
 8004f1c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f24:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2220      	movs	r2, #32
 8004f38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b084      	sub	sp, #16
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d101      	bne.n	8004f6a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004f66:	2302      	movs	r3, #2
 8004f68:	e02d      	b.n	8004fc6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2224      	movs	r2, #36	; 0x24
 8004f76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f022 0201 	bic.w	r2, r2, #1
 8004f90:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f850 	bl	800504c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b084      	sub	sp, #16
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
 8004fd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d101      	bne.n	8004fe6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	e02d      	b.n	8005042 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2224      	movs	r2, #36	; 0x24
 8004ff2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0201 	bic.w	r2, r2, #1
 800500c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f812 	bl	800504c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2220      	movs	r2, #32
 8005034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
	...

0800504c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005058:	2b00      	cmp	r3, #0
 800505a:	d108      	bne.n	800506e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800506c:	e031      	b.n	80050d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800506e:	2308      	movs	r3, #8
 8005070:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005072:	2308      	movs	r3, #8
 8005074:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	0e5b      	lsrs	r3, r3, #25
 800507e:	b2db      	uxtb	r3, r3
 8005080:	f003 0307 	and.w	r3, r3, #7
 8005084:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	0f5b      	lsrs	r3, r3, #29
 800508e:	b2db      	uxtb	r3, r3
 8005090:	f003 0307 	and.w	r3, r3, #7
 8005094:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005096:	7bbb      	ldrb	r3, [r7, #14]
 8005098:	7b3a      	ldrb	r2, [r7, #12]
 800509a:	4911      	ldr	r1, [pc, #68]	; (80050e0 <UARTEx_SetNbDataToProcess+0x94>)
 800509c:	5c8a      	ldrb	r2, [r1, r2]
 800509e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80050a2:	7b3a      	ldrb	r2, [r7, #12]
 80050a4:	490f      	ldr	r1, [pc, #60]	; (80050e4 <UARTEx_SetNbDataToProcess+0x98>)
 80050a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050b4:	7bfb      	ldrb	r3, [r7, #15]
 80050b6:	7b7a      	ldrb	r2, [r7, #13]
 80050b8:	4909      	ldr	r1, [pc, #36]	; (80050e0 <UARTEx_SetNbDataToProcess+0x94>)
 80050ba:	5c8a      	ldrb	r2, [r1, r2]
 80050bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80050c0:	7b7a      	ldrb	r2, [r7, #13]
 80050c2:	4908      	ldr	r1, [pc, #32]	; (80050e4 <UARTEx_SetNbDataToProcess+0x98>)
 80050c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80050d2:	bf00      	nop
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	08005a9c 	.word	0x08005a9c
 80050e4:	08005aa4 	.word	0x08005aa4

080050e8 <siprintf>:
 80050e8:	b40e      	push	{r1, r2, r3}
 80050ea:	b500      	push	{lr}
 80050ec:	b09c      	sub	sp, #112	; 0x70
 80050ee:	ab1d      	add	r3, sp, #116	; 0x74
 80050f0:	9002      	str	r0, [sp, #8]
 80050f2:	9006      	str	r0, [sp, #24]
 80050f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050f8:	4809      	ldr	r0, [pc, #36]	; (8005120 <siprintf+0x38>)
 80050fa:	9107      	str	r1, [sp, #28]
 80050fc:	9104      	str	r1, [sp, #16]
 80050fe:	4909      	ldr	r1, [pc, #36]	; (8005124 <siprintf+0x3c>)
 8005100:	f853 2b04 	ldr.w	r2, [r3], #4
 8005104:	9105      	str	r1, [sp, #20]
 8005106:	6800      	ldr	r0, [r0, #0]
 8005108:	9301      	str	r3, [sp, #4]
 800510a:	a902      	add	r1, sp, #8
 800510c:	f000 f992 	bl	8005434 <_svfiprintf_r>
 8005110:	9b02      	ldr	r3, [sp, #8]
 8005112:	2200      	movs	r2, #0
 8005114:	701a      	strb	r2, [r3, #0]
 8005116:	b01c      	add	sp, #112	; 0x70
 8005118:	f85d eb04 	ldr.w	lr, [sp], #4
 800511c:	b003      	add	sp, #12
 800511e:	4770      	bx	lr
 8005120:	20000058 	.word	0x20000058
 8005124:	ffff0208 	.word	0xffff0208

08005128 <memset>:
 8005128:	4402      	add	r2, r0
 800512a:	4603      	mov	r3, r0
 800512c:	4293      	cmp	r3, r2
 800512e:	d100      	bne.n	8005132 <memset+0xa>
 8005130:	4770      	bx	lr
 8005132:	f803 1b01 	strb.w	r1, [r3], #1
 8005136:	e7f9      	b.n	800512c <memset+0x4>

08005138 <__errno>:
 8005138:	4b01      	ldr	r3, [pc, #4]	; (8005140 <__errno+0x8>)
 800513a:	6818      	ldr	r0, [r3, #0]
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	20000058 	.word	0x20000058

08005144 <__libc_init_array>:
 8005144:	b570      	push	{r4, r5, r6, lr}
 8005146:	4d0d      	ldr	r5, [pc, #52]	; (800517c <__libc_init_array+0x38>)
 8005148:	4c0d      	ldr	r4, [pc, #52]	; (8005180 <__libc_init_array+0x3c>)
 800514a:	1b64      	subs	r4, r4, r5
 800514c:	10a4      	asrs	r4, r4, #2
 800514e:	2600      	movs	r6, #0
 8005150:	42a6      	cmp	r6, r4
 8005152:	d109      	bne.n	8005168 <__libc_init_array+0x24>
 8005154:	4d0b      	ldr	r5, [pc, #44]	; (8005184 <__libc_init_array+0x40>)
 8005156:	4c0c      	ldr	r4, [pc, #48]	; (8005188 <__libc_init_array+0x44>)
 8005158:	f000 fc6a 	bl	8005a30 <_init>
 800515c:	1b64      	subs	r4, r4, r5
 800515e:	10a4      	asrs	r4, r4, #2
 8005160:	2600      	movs	r6, #0
 8005162:	42a6      	cmp	r6, r4
 8005164:	d105      	bne.n	8005172 <__libc_init_array+0x2e>
 8005166:	bd70      	pop	{r4, r5, r6, pc}
 8005168:	f855 3b04 	ldr.w	r3, [r5], #4
 800516c:	4798      	blx	r3
 800516e:	3601      	adds	r6, #1
 8005170:	e7ee      	b.n	8005150 <__libc_init_array+0xc>
 8005172:	f855 3b04 	ldr.w	r3, [r5], #4
 8005176:	4798      	blx	r3
 8005178:	3601      	adds	r6, #1
 800517a:	e7f2      	b.n	8005162 <__libc_init_array+0x1e>
 800517c:	08005ae8 	.word	0x08005ae8
 8005180:	08005ae8 	.word	0x08005ae8
 8005184:	08005ae8 	.word	0x08005ae8
 8005188:	08005aec 	.word	0x08005aec

0800518c <__retarget_lock_acquire_recursive>:
 800518c:	4770      	bx	lr

0800518e <__retarget_lock_release_recursive>:
 800518e:	4770      	bx	lr

08005190 <_free_r>:
 8005190:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005192:	2900      	cmp	r1, #0
 8005194:	d044      	beq.n	8005220 <_free_r+0x90>
 8005196:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800519a:	9001      	str	r0, [sp, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	f1a1 0404 	sub.w	r4, r1, #4
 80051a2:	bfb8      	it	lt
 80051a4:	18e4      	addlt	r4, r4, r3
 80051a6:	f000 f8df 	bl	8005368 <__malloc_lock>
 80051aa:	4a1e      	ldr	r2, [pc, #120]	; (8005224 <_free_r+0x94>)
 80051ac:	9801      	ldr	r0, [sp, #4]
 80051ae:	6813      	ldr	r3, [r2, #0]
 80051b0:	b933      	cbnz	r3, 80051c0 <_free_r+0x30>
 80051b2:	6063      	str	r3, [r4, #4]
 80051b4:	6014      	str	r4, [r2, #0]
 80051b6:	b003      	add	sp, #12
 80051b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051bc:	f000 b8da 	b.w	8005374 <__malloc_unlock>
 80051c0:	42a3      	cmp	r3, r4
 80051c2:	d908      	bls.n	80051d6 <_free_r+0x46>
 80051c4:	6825      	ldr	r5, [r4, #0]
 80051c6:	1961      	adds	r1, r4, r5
 80051c8:	428b      	cmp	r3, r1
 80051ca:	bf01      	itttt	eq
 80051cc:	6819      	ldreq	r1, [r3, #0]
 80051ce:	685b      	ldreq	r3, [r3, #4]
 80051d0:	1949      	addeq	r1, r1, r5
 80051d2:	6021      	streq	r1, [r4, #0]
 80051d4:	e7ed      	b.n	80051b2 <_free_r+0x22>
 80051d6:	461a      	mov	r2, r3
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	b10b      	cbz	r3, 80051e0 <_free_r+0x50>
 80051dc:	42a3      	cmp	r3, r4
 80051de:	d9fa      	bls.n	80051d6 <_free_r+0x46>
 80051e0:	6811      	ldr	r1, [r2, #0]
 80051e2:	1855      	adds	r5, r2, r1
 80051e4:	42a5      	cmp	r5, r4
 80051e6:	d10b      	bne.n	8005200 <_free_r+0x70>
 80051e8:	6824      	ldr	r4, [r4, #0]
 80051ea:	4421      	add	r1, r4
 80051ec:	1854      	adds	r4, r2, r1
 80051ee:	42a3      	cmp	r3, r4
 80051f0:	6011      	str	r1, [r2, #0]
 80051f2:	d1e0      	bne.n	80051b6 <_free_r+0x26>
 80051f4:	681c      	ldr	r4, [r3, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	6053      	str	r3, [r2, #4]
 80051fa:	440c      	add	r4, r1
 80051fc:	6014      	str	r4, [r2, #0]
 80051fe:	e7da      	b.n	80051b6 <_free_r+0x26>
 8005200:	d902      	bls.n	8005208 <_free_r+0x78>
 8005202:	230c      	movs	r3, #12
 8005204:	6003      	str	r3, [r0, #0]
 8005206:	e7d6      	b.n	80051b6 <_free_r+0x26>
 8005208:	6825      	ldr	r5, [r4, #0]
 800520a:	1961      	adds	r1, r4, r5
 800520c:	428b      	cmp	r3, r1
 800520e:	bf04      	itt	eq
 8005210:	6819      	ldreq	r1, [r3, #0]
 8005212:	685b      	ldreq	r3, [r3, #4]
 8005214:	6063      	str	r3, [r4, #4]
 8005216:	bf04      	itt	eq
 8005218:	1949      	addeq	r1, r1, r5
 800521a:	6021      	streq	r1, [r4, #0]
 800521c:	6054      	str	r4, [r2, #4]
 800521e:	e7ca      	b.n	80051b6 <_free_r+0x26>
 8005220:	b003      	add	sp, #12
 8005222:	bd30      	pop	{r4, r5, pc}
 8005224:	2000029c 	.word	0x2000029c

08005228 <sbrk_aligned>:
 8005228:	b570      	push	{r4, r5, r6, lr}
 800522a:	4e0e      	ldr	r6, [pc, #56]	; (8005264 <sbrk_aligned+0x3c>)
 800522c:	460c      	mov	r4, r1
 800522e:	6831      	ldr	r1, [r6, #0]
 8005230:	4605      	mov	r5, r0
 8005232:	b911      	cbnz	r1, 800523a <sbrk_aligned+0x12>
 8005234:	f000 fba6 	bl	8005984 <_sbrk_r>
 8005238:	6030      	str	r0, [r6, #0]
 800523a:	4621      	mov	r1, r4
 800523c:	4628      	mov	r0, r5
 800523e:	f000 fba1 	bl	8005984 <_sbrk_r>
 8005242:	1c43      	adds	r3, r0, #1
 8005244:	d00a      	beq.n	800525c <sbrk_aligned+0x34>
 8005246:	1cc4      	adds	r4, r0, #3
 8005248:	f024 0403 	bic.w	r4, r4, #3
 800524c:	42a0      	cmp	r0, r4
 800524e:	d007      	beq.n	8005260 <sbrk_aligned+0x38>
 8005250:	1a21      	subs	r1, r4, r0
 8005252:	4628      	mov	r0, r5
 8005254:	f000 fb96 	bl	8005984 <_sbrk_r>
 8005258:	3001      	adds	r0, #1
 800525a:	d101      	bne.n	8005260 <sbrk_aligned+0x38>
 800525c:	f04f 34ff 	mov.w	r4, #4294967295
 8005260:	4620      	mov	r0, r4
 8005262:	bd70      	pop	{r4, r5, r6, pc}
 8005264:	200002a0 	.word	0x200002a0

08005268 <_malloc_r>:
 8005268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800526c:	1ccd      	adds	r5, r1, #3
 800526e:	f025 0503 	bic.w	r5, r5, #3
 8005272:	3508      	adds	r5, #8
 8005274:	2d0c      	cmp	r5, #12
 8005276:	bf38      	it	cc
 8005278:	250c      	movcc	r5, #12
 800527a:	2d00      	cmp	r5, #0
 800527c:	4607      	mov	r7, r0
 800527e:	db01      	blt.n	8005284 <_malloc_r+0x1c>
 8005280:	42a9      	cmp	r1, r5
 8005282:	d905      	bls.n	8005290 <_malloc_r+0x28>
 8005284:	230c      	movs	r3, #12
 8005286:	603b      	str	r3, [r7, #0]
 8005288:	2600      	movs	r6, #0
 800528a:	4630      	mov	r0, r6
 800528c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005290:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005364 <_malloc_r+0xfc>
 8005294:	f000 f868 	bl	8005368 <__malloc_lock>
 8005298:	f8d8 3000 	ldr.w	r3, [r8]
 800529c:	461c      	mov	r4, r3
 800529e:	bb5c      	cbnz	r4, 80052f8 <_malloc_r+0x90>
 80052a0:	4629      	mov	r1, r5
 80052a2:	4638      	mov	r0, r7
 80052a4:	f7ff ffc0 	bl	8005228 <sbrk_aligned>
 80052a8:	1c43      	adds	r3, r0, #1
 80052aa:	4604      	mov	r4, r0
 80052ac:	d155      	bne.n	800535a <_malloc_r+0xf2>
 80052ae:	f8d8 4000 	ldr.w	r4, [r8]
 80052b2:	4626      	mov	r6, r4
 80052b4:	2e00      	cmp	r6, #0
 80052b6:	d145      	bne.n	8005344 <_malloc_r+0xdc>
 80052b8:	2c00      	cmp	r4, #0
 80052ba:	d048      	beq.n	800534e <_malloc_r+0xe6>
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	4631      	mov	r1, r6
 80052c0:	4638      	mov	r0, r7
 80052c2:	eb04 0903 	add.w	r9, r4, r3
 80052c6:	f000 fb5d 	bl	8005984 <_sbrk_r>
 80052ca:	4581      	cmp	r9, r0
 80052cc:	d13f      	bne.n	800534e <_malloc_r+0xe6>
 80052ce:	6821      	ldr	r1, [r4, #0]
 80052d0:	1a6d      	subs	r5, r5, r1
 80052d2:	4629      	mov	r1, r5
 80052d4:	4638      	mov	r0, r7
 80052d6:	f7ff ffa7 	bl	8005228 <sbrk_aligned>
 80052da:	3001      	adds	r0, #1
 80052dc:	d037      	beq.n	800534e <_malloc_r+0xe6>
 80052de:	6823      	ldr	r3, [r4, #0]
 80052e0:	442b      	add	r3, r5
 80052e2:	6023      	str	r3, [r4, #0]
 80052e4:	f8d8 3000 	ldr.w	r3, [r8]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d038      	beq.n	800535e <_malloc_r+0xf6>
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	42a2      	cmp	r2, r4
 80052f0:	d12b      	bne.n	800534a <_malloc_r+0xe2>
 80052f2:	2200      	movs	r2, #0
 80052f4:	605a      	str	r2, [r3, #4]
 80052f6:	e00f      	b.n	8005318 <_malloc_r+0xb0>
 80052f8:	6822      	ldr	r2, [r4, #0]
 80052fa:	1b52      	subs	r2, r2, r5
 80052fc:	d41f      	bmi.n	800533e <_malloc_r+0xd6>
 80052fe:	2a0b      	cmp	r2, #11
 8005300:	d917      	bls.n	8005332 <_malloc_r+0xca>
 8005302:	1961      	adds	r1, r4, r5
 8005304:	42a3      	cmp	r3, r4
 8005306:	6025      	str	r5, [r4, #0]
 8005308:	bf18      	it	ne
 800530a:	6059      	strne	r1, [r3, #4]
 800530c:	6863      	ldr	r3, [r4, #4]
 800530e:	bf08      	it	eq
 8005310:	f8c8 1000 	streq.w	r1, [r8]
 8005314:	5162      	str	r2, [r4, r5]
 8005316:	604b      	str	r3, [r1, #4]
 8005318:	4638      	mov	r0, r7
 800531a:	f104 060b 	add.w	r6, r4, #11
 800531e:	f000 f829 	bl	8005374 <__malloc_unlock>
 8005322:	f026 0607 	bic.w	r6, r6, #7
 8005326:	1d23      	adds	r3, r4, #4
 8005328:	1af2      	subs	r2, r6, r3
 800532a:	d0ae      	beq.n	800528a <_malloc_r+0x22>
 800532c:	1b9b      	subs	r3, r3, r6
 800532e:	50a3      	str	r3, [r4, r2]
 8005330:	e7ab      	b.n	800528a <_malloc_r+0x22>
 8005332:	42a3      	cmp	r3, r4
 8005334:	6862      	ldr	r2, [r4, #4]
 8005336:	d1dd      	bne.n	80052f4 <_malloc_r+0x8c>
 8005338:	f8c8 2000 	str.w	r2, [r8]
 800533c:	e7ec      	b.n	8005318 <_malloc_r+0xb0>
 800533e:	4623      	mov	r3, r4
 8005340:	6864      	ldr	r4, [r4, #4]
 8005342:	e7ac      	b.n	800529e <_malloc_r+0x36>
 8005344:	4634      	mov	r4, r6
 8005346:	6876      	ldr	r6, [r6, #4]
 8005348:	e7b4      	b.n	80052b4 <_malloc_r+0x4c>
 800534a:	4613      	mov	r3, r2
 800534c:	e7cc      	b.n	80052e8 <_malloc_r+0x80>
 800534e:	230c      	movs	r3, #12
 8005350:	603b      	str	r3, [r7, #0]
 8005352:	4638      	mov	r0, r7
 8005354:	f000 f80e 	bl	8005374 <__malloc_unlock>
 8005358:	e797      	b.n	800528a <_malloc_r+0x22>
 800535a:	6025      	str	r5, [r4, #0]
 800535c:	e7dc      	b.n	8005318 <_malloc_r+0xb0>
 800535e:	605b      	str	r3, [r3, #4]
 8005360:	deff      	udf	#255	; 0xff
 8005362:	bf00      	nop
 8005364:	2000029c 	.word	0x2000029c

08005368 <__malloc_lock>:
 8005368:	4801      	ldr	r0, [pc, #4]	; (8005370 <__malloc_lock+0x8>)
 800536a:	f7ff bf0f 	b.w	800518c <__retarget_lock_acquire_recursive>
 800536e:	bf00      	nop
 8005370:	20000298 	.word	0x20000298

08005374 <__malloc_unlock>:
 8005374:	4801      	ldr	r0, [pc, #4]	; (800537c <__malloc_unlock+0x8>)
 8005376:	f7ff bf0a 	b.w	800518e <__retarget_lock_release_recursive>
 800537a:	bf00      	nop
 800537c:	20000298 	.word	0x20000298

08005380 <__ssputs_r>:
 8005380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005384:	688e      	ldr	r6, [r1, #8]
 8005386:	461f      	mov	r7, r3
 8005388:	42be      	cmp	r6, r7
 800538a:	680b      	ldr	r3, [r1, #0]
 800538c:	4682      	mov	sl, r0
 800538e:	460c      	mov	r4, r1
 8005390:	4690      	mov	r8, r2
 8005392:	d82c      	bhi.n	80053ee <__ssputs_r+0x6e>
 8005394:	898a      	ldrh	r2, [r1, #12]
 8005396:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800539a:	d026      	beq.n	80053ea <__ssputs_r+0x6a>
 800539c:	6965      	ldr	r5, [r4, #20]
 800539e:	6909      	ldr	r1, [r1, #16]
 80053a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80053a4:	eba3 0901 	sub.w	r9, r3, r1
 80053a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80053ac:	1c7b      	adds	r3, r7, #1
 80053ae:	444b      	add	r3, r9
 80053b0:	106d      	asrs	r5, r5, #1
 80053b2:	429d      	cmp	r5, r3
 80053b4:	bf38      	it	cc
 80053b6:	461d      	movcc	r5, r3
 80053b8:	0553      	lsls	r3, r2, #21
 80053ba:	d527      	bpl.n	800540c <__ssputs_r+0x8c>
 80053bc:	4629      	mov	r1, r5
 80053be:	f7ff ff53 	bl	8005268 <_malloc_r>
 80053c2:	4606      	mov	r6, r0
 80053c4:	b360      	cbz	r0, 8005420 <__ssputs_r+0xa0>
 80053c6:	6921      	ldr	r1, [r4, #16]
 80053c8:	464a      	mov	r2, r9
 80053ca:	f000 faeb 	bl	80059a4 <memcpy>
 80053ce:	89a3      	ldrh	r3, [r4, #12]
 80053d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80053d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053d8:	81a3      	strh	r3, [r4, #12]
 80053da:	6126      	str	r6, [r4, #16]
 80053dc:	6165      	str	r5, [r4, #20]
 80053de:	444e      	add	r6, r9
 80053e0:	eba5 0509 	sub.w	r5, r5, r9
 80053e4:	6026      	str	r6, [r4, #0]
 80053e6:	60a5      	str	r5, [r4, #8]
 80053e8:	463e      	mov	r6, r7
 80053ea:	42be      	cmp	r6, r7
 80053ec:	d900      	bls.n	80053f0 <__ssputs_r+0x70>
 80053ee:	463e      	mov	r6, r7
 80053f0:	6820      	ldr	r0, [r4, #0]
 80053f2:	4632      	mov	r2, r6
 80053f4:	4641      	mov	r1, r8
 80053f6:	f000 faab 	bl	8005950 <memmove>
 80053fa:	68a3      	ldr	r3, [r4, #8]
 80053fc:	1b9b      	subs	r3, r3, r6
 80053fe:	60a3      	str	r3, [r4, #8]
 8005400:	6823      	ldr	r3, [r4, #0]
 8005402:	4433      	add	r3, r6
 8005404:	6023      	str	r3, [r4, #0]
 8005406:	2000      	movs	r0, #0
 8005408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800540c:	462a      	mov	r2, r5
 800540e:	f000 fad7 	bl	80059c0 <_realloc_r>
 8005412:	4606      	mov	r6, r0
 8005414:	2800      	cmp	r0, #0
 8005416:	d1e0      	bne.n	80053da <__ssputs_r+0x5a>
 8005418:	6921      	ldr	r1, [r4, #16]
 800541a:	4650      	mov	r0, sl
 800541c:	f7ff feb8 	bl	8005190 <_free_r>
 8005420:	230c      	movs	r3, #12
 8005422:	f8ca 3000 	str.w	r3, [sl]
 8005426:	89a3      	ldrh	r3, [r4, #12]
 8005428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800542c:	81a3      	strh	r3, [r4, #12]
 800542e:	f04f 30ff 	mov.w	r0, #4294967295
 8005432:	e7e9      	b.n	8005408 <__ssputs_r+0x88>

08005434 <_svfiprintf_r>:
 8005434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005438:	4698      	mov	r8, r3
 800543a:	898b      	ldrh	r3, [r1, #12]
 800543c:	061b      	lsls	r3, r3, #24
 800543e:	b09d      	sub	sp, #116	; 0x74
 8005440:	4607      	mov	r7, r0
 8005442:	460d      	mov	r5, r1
 8005444:	4614      	mov	r4, r2
 8005446:	d50e      	bpl.n	8005466 <_svfiprintf_r+0x32>
 8005448:	690b      	ldr	r3, [r1, #16]
 800544a:	b963      	cbnz	r3, 8005466 <_svfiprintf_r+0x32>
 800544c:	2140      	movs	r1, #64	; 0x40
 800544e:	f7ff ff0b 	bl	8005268 <_malloc_r>
 8005452:	6028      	str	r0, [r5, #0]
 8005454:	6128      	str	r0, [r5, #16]
 8005456:	b920      	cbnz	r0, 8005462 <_svfiprintf_r+0x2e>
 8005458:	230c      	movs	r3, #12
 800545a:	603b      	str	r3, [r7, #0]
 800545c:	f04f 30ff 	mov.w	r0, #4294967295
 8005460:	e0d0      	b.n	8005604 <_svfiprintf_r+0x1d0>
 8005462:	2340      	movs	r3, #64	; 0x40
 8005464:	616b      	str	r3, [r5, #20]
 8005466:	2300      	movs	r3, #0
 8005468:	9309      	str	r3, [sp, #36]	; 0x24
 800546a:	2320      	movs	r3, #32
 800546c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005470:	f8cd 800c 	str.w	r8, [sp, #12]
 8005474:	2330      	movs	r3, #48	; 0x30
 8005476:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800561c <_svfiprintf_r+0x1e8>
 800547a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800547e:	f04f 0901 	mov.w	r9, #1
 8005482:	4623      	mov	r3, r4
 8005484:	469a      	mov	sl, r3
 8005486:	f813 2b01 	ldrb.w	r2, [r3], #1
 800548a:	b10a      	cbz	r2, 8005490 <_svfiprintf_r+0x5c>
 800548c:	2a25      	cmp	r2, #37	; 0x25
 800548e:	d1f9      	bne.n	8005484 <_svfiprintf_r+0x50>
 8005490:	ebba 0b04 	subs.w	fp, sl, r4
 8005494:	d00b      	beq.n	80054ae <_svfiprintf_r+0x7a>
 8005496:	465b      	mov	r3, fp
 8005498:	4622      	mov	r2, r4
 800549a:	4629      	mov	r1, r5
 800549c:	4638      	mov	r0, r7
 800549e:	f7ff ff6f 	bl	8005380 <__ssputs_r>
 80054a2:	3001      	adds	r0, #1
 80054a4:	f000 80a9 	beq.w	80055fa <_svfiprintf_r+0x1c6>
 80054a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054aa:	445a      	add	r2, fp
 80054ac:	9209      	str	r2, [sp, #36]	; 0x24
 80054ae:	f89a 3000 	ldrb.w	r3, [sl]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 80a1 	beq.w	80055fa <_svfiprintf_r+0x1c6>
 80054b8:	2300      	movs	r3, #0
 80054ba:	f04f 32ff 	mov.w	r2, #4294967295
 80054be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054c2:	f10a 0a01 	add.w	sl, sl, #1
 80054c6:	9304      	str	r3, [sp, #16]
 80054c8:	9307      	str	r3, [sp, #28]
 80054ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054ce:	931a      	str	r3, [sp, #104]	; 0x68
 80054d0:	4654      	mov	r4, sl
 80054d2:	2205      	movs	r2, #5
 80054d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054d8:	4850      	ldr	r0, [pc, #320]	; (800561c <_svfiprintf_r+0x1e8>)
 80054da:	f7fa fea1 	bl	8000220 <memchr>
 80054de:	9a04      	ldr	r2, [sp, #16]
 80054e0:	b9d8      	cbnz	r0, 800551a <_svfiprintf_r+0xe6>
 80054e2:	06d0      	lsls	r0, r2, #27
 80054e4:	bf44      	itt	mi
 80054e6:	2320      	movmi	r3, #32
 80054e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054ec:	0711      	lsls	r1, r2, #28
 80054ee:	bf44      	itt	mi
 80054f0:	232b      	movmi	r3, #43	; 0x2b
 80054f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054f6:	f89a 3000 	ldrb.w	r3, [sl]
 80054fa:	2b2a      	cmp	r3, #42	; 0x2a
 80054fc:	d015      	beq.n	800552a <_svfiprintf_r+0xf6>
 80054fe:	9a07      	ldr	r2, [sp, #28]
 8005500:	4654      	mov	r4, sl
 8005502:	2000      	movs	r0, #0
 8005504:	f04f 0c0a 	mov.w	ip, #10
 8005508:	4621      	mov	r1, r4
 800550a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800550e:	3b30      	subs	r3, #48	; 0x30
 8005510:	2b09      	cmp	r3, #9
 8005512:	d94d      	bls.n	80055b0 <_svfiprintf_r+0x17c>
 8005514:	b1b0      	cbz	r0, 8005544 <_svfiprintf_r+0x110>
 8005516:	9207      	str	r2, [sp, #28]
 8005518:	e014      	b.n	8005544 <_svfiprintf_r+0x110>
 800551a:	eba0 0308 	sub.w	r3, r0, r8
 800551e:	fa09 f303 	lsl.w	r3, r9, r3
 8005522:	4313      	orrs	r3, r2
 8005524:	9304      	str	r3, [sp, #16]
 8005526:	46a2      	mov	sl, r4
 8005528:	e7d2      	b.n	80054d0 <_svfiprintf_r+0x9c>
 800552a:	9b03      	ldr	r3, [sp, #12]
 800552c:	1d19      	adds	r1, r3, #4
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	9103      	str	r1, [sp, #12]
 8005532:	2b00      	cmp	r3, #0
 8005534:	bfbb      	ittet	lt
 8005536:	425b      	neglt	r3, r3
 8005538:	f042 0202 	orrlt.w	r2, r2, #2
 800553c:	9307      	strge	r3, [sp, #28]
 800553e:	9307      	strlt	r3, [sp, #28]
 8005540:	bfb8      	it	lt
 8005542:	9204      	strlt	r2, [sp, #16]
 8005544:	7823      	ldrb	r3, [r4, #0]
 8005546:	2b2e      	cmp	r3, #46	; 0x2e
 8005548:	d10c      	bne.n	8005564 <_svfiprintf_r+0x130>
 800554a:	7863      	ldrb	r3, [r4, #1]
 800554c:	2b2a      	cmp	r3, #42	; 0x2a
 800554e:	d134      	bne.n	80055ba <_svfiprintf_r+0x186>
 8005550:	9b03      	ldr	r3, [sp, #12]
 8005552:	1d1a      	adds	r2, r3, #4
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	9203      	str	r2, [sp, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	bfb8      	it	lt
 800555c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005560:	3402      	adds	r4, #2
 8005562:	9305      	str	r3, [sp, #20]
 8005564:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800562c <_svfiprintf_r+0x1f8>
 8005568:	7821      	ldrb	r1, [r4, #0]
 800556a:	2203      	movs	r2, #3
 800556c:	4650      	mov	r0, sl
 800556e:	f7fa fe57 	bl	8000220 <memchr>
 8005572:	b138      	cbz	r0, 8005584 <_svfiprintf_r+0x150>
 8005574:	9b04      	ldr	r3, [sp, #16]
 8005576:	eba0 000a 	sub.w	r0, r0, sl
 800557a:	2240      	movs	r2, #64	; 0x40
 800557c:	4082      	lsls	r2, r0
 800557e:	4313      	orrs	r3, r2
 8005580:	3401      	adds	r4, #1
 8005582:	9304      	str	r3, [sp, #16]
 8005584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005588:	4825      	ldr	r0, [pc, #148]	; (8005620 <_svfiprintf_r+0x1ec>)
 800558a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800558e:	2206      	movs	r2, #6
 8005590:	f7fa fe46 	bl	8000220 <memchr>
 8005594:	2800      	cmp	r0, #0
 8005596:	d038      	beq.n	800560a <_svfiprintf_r+0x1d6>
 8005598:	4b22      	ldr	r3, [pc, #136]	; (8005624 <_svfiprintf_r+0x1f0>)
 800559a:	bb1b      	cbnz	r3, 80055e4 <_svfiprintf_r+0x1b0>
 800559c:	9b03      	ldr	r3, [sp, #12]
 800559e:	3307      	adds	r3, #7
 80055a0:	f023 0307 	bic.w	r3, r3, #7
 80055a4:	3308      	adds	r3, #8
 80055a6:	9303      	str	r3, [sp, #12]
 80055a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055aa:	4433      	add	r3, r6
 80055ac:	9309      	str	r3, [sp, #36]	; 0x24
 80055ae:	e768      	b.n	8005482 <_svfiprintf_r+0x4e>
 80055b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80055b4:	460c      	mov	r4, r1
 80055b6:	2001      	movs	r0, #1
 80055b8:	e7a6      	b.n	8005508 <_svfiprintf_r+0xd4>
 80055ba:	2300      	movs	r3, #0
 80055bc:	3401      	adds	r4, #1
 80055be:	9305      	str	r3, [sp, #20]
 80055c0:	4619      	mov	r1, r3
 80055c2:	f04f 0c0a 	mov.w	ip, #10
 80055c6:	4620      	mov	r0, r4
 80055c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055cc:	3a30      	subs	r2, #48	; 0x30
 80055ce:	2a09      	cmp	r2, #9
 80055d0:	d903      	bls.n	80055da <_svfiprintf_r+0x1a6>
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d0c6      	beq.n	8005564 <_svfiprintf_r+0x130>
 80055d6:	9105      	str	r1, [sp, #20]
 80055d8:	e7c4      	b.n	8005564 <_svfiprintf_r+0x130>
 80055da:	fb0c 2101 	mla	r1, ip, r1, r2
 80055de:	4604      	mov	r4, r0
 80055e0:	2301      	movs	r3, #1
 80055e2:	e7f0      	b.n	80055c6 <_svfiprintf_r+0x192>
 80055e4:	ab03      	add	r3, sp, #12
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	462a      	mov	r2, r5
 80055ea:	4b0f      	ldr	r3, [pc, #60]	; (8005628 <_svfiprintf_r+0x1f4>)
 80055ec:	a904      	add	r1, sp, #16
 80055ee:	4638      	mov	r0, r7
 80055f0:	f3af 8000 	nop.w
 80055f4:	1c42      	adds	r2, r0, #1
 80055f6:	4606      	mov	r6, r0
 80055f8:	d1d6      	bne.n	80055a8 <_svfiprintf_r+0x174>
 80055fa:	89ab      	ldrh	r3, [r5, #12]
 80055fc:	065b      	lsls	r3, r3, #25
 80055fe:	f53f af2d 	bmi.w	800545c <_svfiprintf_r+0x28>
 8005602:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005604:	b01d      	add	sp, #116	; 0x74
 8005606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800560a:	ab03      	add	r3, sp, #12
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	462a      	mov	r2, r5
 8005610:	4b05      	ldr	r3, [pc, #20]	; (8005628 <_svfiprintf_r+0x1f4>)
 8005612:	a904      	add	r1, sp, #16
 8005614:	4638      	mov	r0, r7
 8005616:	f000 f879 	bl	800570c <_printf_i>
 800561a:	e7eb      	b.n	80055f4 <_svfiprintf_r+0x1c0>
 800561c:	08005aac 	.word	0x08005aac
 8005620:	08005ab6 	.word	0x08005ab6
 8005624:	00000000 	.word	0x00000000
 8005628:	08005381 	.word	0x08005381
 800562c:	08005ab2 	.word	0x08005ab2

08005630 <_printf_common>:
 8005630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005634:	4616      	mov	r6, r2
 8005636:	4699      	mov	r9, r3
 8005638:	688a      	ldr	r2, [r1, #8]
 800563a:	690b      	ldr	r3, [r1, #16]
 800563c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005640:	4293      	cmp	r3, r2
 8005642:	bfb8      	it	lt
 8005644:	4613      	movlt	r3, r2
 8005646:	6033      	str	r3, [r6, #0]
 8005648:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800564c:	4607      	mov	r7, r0
 800564e:	460c      	mov	r4, r1
 8005650:	b10a      	cbz	r2, 8005656 <_printf_common+0x26>
 8005652:	3301      	adds	r3, #1
 8005654:	6033      	str	r3, [r6, #0]
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	0699      	lsls	r1, r3, #26
 800565a:	bf42      	ittt	mi
 800565c:	6833      	ldrmi	r3, [r6, #0]
 800565e:	3302      	addmi	r3, #2
 8005660:	6033      	strmi	r3, [r6, #0]
 8005662:	6825      	ldr	r5, [r4, #0]
 8005664:	f015 0506 	ands.w	r5, r5, #6
 8005668:	d106      	bne.n	8005678 <_printf_common+0x48>
 800566a:	f104 0a19 	add.w	sl, r4, #25
 800566e:	68e3      	ldr	r3, [r4, #12]
 8005670:	6832      	ldr	r2, [r6, #0]
 8005672:	1a9b      	subs	r3, r3, r2
 8005674:	42ab      	cmp	r3, r5
 8005676:	dc26      	bgt.n	80056c6 <_printf_common+0x96>
 8005678:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800567c:	1e13      	subs	r3, r2, #0
 800567e:	6822      	ldr	r2, [r4, #0]
 8005680:	bf18      	it	ne
 8005682:	2301      	movne	r3, #1
 8005684:	0692      	lsls	r2, r2, #26
 8005686:	d42b      	bmi.n	80056e0 <_printf_common+0xb0>
 8005688:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800568c:	4649      	mov	r1, r9
 800568e:	4638      	mov	r0, r7
 8005690:	47c0      	blx	r8
 8005692:	3001      	adds	r0, #1
 8005694:	d01e      	beq.n	80056d4 <_printf_common+0xa4>
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	6922      	ldr	r2, [r4, #16]
 800569a:	f003 0306 	and.w	r3, r3, #6
 800569e:	2b04      	cmp	r3, #4
 80056a0:	bf02      	ittt	eq
 80056a2:	68e5      	ldreq	r5, [r4, #12]
 80056a4:	6833      	ldreq	r3, [r6, #0]
 80056a6:	1aed      	subeq	r5, r5, r3
 80056a8:	68a3      	ldr	r3, [r4, #8]
 80056aa:	bf0c      	ite	eq
 80056ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056b0:	2500      	movne	r5, #0
 80056b2:	4293      	cmp	r3, r2
 80056b4:	bfc4      	itt	gt
 80056b6:	1a9b      	subgt	r3, r3, r2
 80056b8:	18ed      	addgt	r5, r5, r3
 80056ba:	2600      	movs	r6, #0
 80056bc:	341a      	adds	r4, #26
 80056be:	42b5      	cmp	r5, r6
 80056c0:	d11a      	bne.n	80056f8 <_printf_common+0xc8>
 80056c2:	2000      	movs	r0, #0
 80056c4:	e008      	b.n	80056d8 <_printf_common+0xa8>
 80056c6:	2301      	movs	r3, #1
 80056c8:	4652      	mov	r2, sl
 80056ca:	4649      	mov	r1, r9
 80056cc:	4638      	mov	r0, r7
 80056ce:	47c0      	blx	r8
 80056d0:	3001      	adds	r0, #1
 80056d2:	d103      	bne.n	80056dc <_printf_common+0xac>
 80056d4:	f04f 30ff 	mov.w	r0, #4294967295
 80056d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056dc:	3501      	adds	r5, #1
 80056de:	e7c6      	b.n	800566e <_printf_common+0x3e>
 80056e0:	18e1      	adds	r1, r4, r3
 80056e2:	1c5a      	adds	r2, r3, #1
 80056e4:	2030      	movs	r0, #48	; 0x30
 80056e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056ea:	4422      	add	r2, r4
 80056ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056f4:	3302      	adds	r3, #2
 80056f6:	e7c7      	b.n	8005688 <_printf_common+0x58>
 80056f8:	2301      	movs	r3, #1
 80056fa:	4622      	mov	r2, r4
 80056fc:	4649      	mov	r1, r9
 80056fe:	4638      	mov	r0, r7
 8005700:	47c0      	blx	r8
 8005702:	3001      	adds	r0, #1
 8005704:	d0e6      	beq.n	80056d4 <_printf_common+0xa4>
 8005706:	3601      	adds	r6, #1
 8005708:	e7d9      	b.n	80056be <_printf_common+0x8e>
	...

0800570c <_printf_i>:
 800570c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005710:	7e0f      	ldrb	r7, [r1, #24]
 8005712:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005714:	2f78      	cmp	r7, #120	; 0x78
 8005716:	4691      	mov	r9, r2
 8005718:	4680      	mov	r8, r0
 800571a:	460c      	mov	r4, r1
 800571c:	469a      	mov	sl, r3
 800571e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005722:	d807      	bhi.n	8005734 <_printf_i+0x28>
 8005724:	2f62      	cmp	r7, #98	; 0x62
 8005726:	d80a      	bhi.n	800573e <_printf_i+0x32>
 8005728:	2f00      	cmp	r7, #0
 800572a:	f000 80d4 	beq.w	80058d6 <_printf_i+0x1ca>
 800572e:	2f58      	cmp	r7, #88	; 0x58
 8005730:	f000 80c0 	beq.w	80058b4 <_printf_i+0x1a8>
 8005734:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005738:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800573c:	e03a      	b.n	80057b4 <_printf_i+0xa8>
 800573e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005742:	2b15      	cmp	r3, #21
 8005744:	d8f6      	bhi.n	8005734 <_printf_i+0x28>
 8005746:	a101      	add	r1, pc, #4	; (adr r1, 800574c <_printf_i+0x40>)
 8005748:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800574c:	080057a5 	.word	0x080057a5
 8005750:	080057b9 	.word	0x080057b9
 8005754:	08005735 	.word	0x08005735
 8005758:	08005735 	.word	0x08005735
 800575c:	08005735 	.word	0x08005735
 8005760:	08005735 	.word	0x08005735
 8005764:	080057b9 	.word	0x080057b9
 8005768:	08005735 	.word	0x08005735
 800576c:	08005735 	.word	0x08005735
 8005770:	08005735 	.word	0x08005735
 8005774:	08005735 	.word	0x08005735
 8005778:	080058bd 	.word	0x080058bd
 800577c:	080057e5 	.word	0x080057e5
 8005780:	08005877 	.word	0x08005877
 8005784:	08005735 	.word	0x08005735
 8005788:	08005735 	.word	0x08005735
 800578c:	080058df 	.word	0x080058df
 8005790:	08005735 	.word	0x08005735
 8005794:	080057e5 	.word	0x080057e5
 8005798:	08005735 	.word	0x08005735
 800579c:	08005735 	.word	0x08005735
 80057a0:	0800587f 	.word	0x0800587f
 80057a4:	682b      	ldr	r3, [r5, #0]
 80057a6:	1d1a      	adds	r2, r3, #4
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	602a      	str	r2, [r5, #0]
 80057ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057b4:	2301      	movs	r3, #1
 80057b6:	e09f      	b.n	80058f8 <_printf_i+0x1ec>
 80057b8:	6820      	ldr	r0, [r4, #0]
 80057ba:	682b      	ldr	r3, [r5, #0]
 80057bc:	0607      	lsls	r7, r0, #24
 80057be:	f103 0104 	add.w	r1, r3, #4
 80057c2:	6029      	str	r1, [r5, #0]
 80057c4:	d501      	bpl.n	80057ca <_printf_i+0xbe>
 80057c6:	681e      	ldr	r6, [r3, #0]
 80057c8:	e003      	b.n	80057d2 <_printf_i+0xc6>
 80057ca:	0646      	lsls	r6, r0, #25
 80057cc:	d5fb      	bpl.n	80057c6 <_printf_i+0xba>
 80057ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80057d2:	2e00      	cmp	r6, #0
 80057d4:	da03      	bge.n	80057de <_printf_i+0xd2>
 80057d6:	232d      	movs	r3, #45	; 0x2d
 80057d8:	4276      	negs	r6, r6
 80057da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057de:	485a      	ldr	r0, [pc, #360]	; (8005948 <_printf_i+0x23c>)
 80057e0:	230a      	movs	r3, #10
 80057e2:	e012      	b.n	800580a <_printf_i+0xfe>
 80057e4:	682b      	ldr	r3, [r5, #0]
 80057e6:	6820      	ldr	r0, [r4, #0]
 80057e8:	1d19      	adds	r1, r3, #4
 80057ea:	6029      	str	r1, [r5, #0]
 80057ec:	0605      	lsls	r5, r0, #24
 80057ee:	d501      	bpl.n	80057f4 <_printf_i+0xe8>
 80057f0:	681e      	ldr	r6, [r3, #0]
 80057f2:	e002      	b.n	80057fa <_printf_i+0xee>
 80057f4:	0641      	lsls	r1, r0, #25
 80057f6:	d5fb      	bpl.n	80057f0 <_printf_i+0xe4>
 80057f8:	881e      	ldrh	r6, [r3, #0]
 80057fa:	4853      	ldr	r0, [pc, #332]	; (8005948 <_printf_i+0x23c>)
 80057fc:	2f6f      	cmp	r7, #111	; 0x6f
 80057fe:	bf0c      	ite	eq
 8005800:	2308      	moveq	r3, #8
 8005802:	230a      	movne	r3, #10
 8005804:	2100      	movs	r1, #0
 8005806:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800580a:	6865      	ldr	r5, [r4, #4]
 800580c:	60a5      	str	r5, [r4, #8]
 800580e:	2d00      	cmp	r5, #0
 8005810:	bfa2      	ittt	ge
 8005812:	6821      	ldrge	r1, [r4, #0]
 8005814:	f021 0104 	bicge.w	r1, r1, #4
 8005818:	6021      	strge	r1, [r4, #0]
 800581a:	b90e      	cbnz	r6, 8005820 <_printf_i+0x114>
 800581c:	2d00      	cmp	r5, #0
 800581e:	d04b      	beq.n	80058b8 <_printf_i+0x1ac>
 8005820:	4615      	mov	r5, r2
 8005822:	fbb6 f1f3 	udiv	r1, r6, r3
 8005826:	fb03 6711 	mls	r7, r3, r1, r6
 800582a:	5dc7      	ldrb	r7, [r0, r7]
 800582c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005830:	4637      	mov	r7, r6
 8005832:	42bb      	cmp	r3, r7
 8005834:	460e      	mov	r6, r1
 8005836:	d9f4      	bls.n	8005822 <_printf_i+0x116>
 8005838:	2b08      	cmp	r3, #8
 800583a:	d10b      	bne.n	8005854 <_printf_i+0x148>
 800583c:	6823      	ldr	r3, [r4, #0]
 800583e:	07de      	lsls	r6, r3, #31
 8005840:	d508      	bpl.n	8005854 <_printf_i+0x148>
 8005842:	6923      	ldr	r3, [r4, #16]
 8005844:	6861      	ldr	r1, [r4, #4]
 8005846:	4299      	cmp	r1, r3
 8005848:	bfde      	ittt	le
 800584a:	2330      	movle	r3, #48	; 0x30
 800584c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005850:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005854:	1b52      	subs	r2, r2, r5
 8005856:	6122      	str	r2, [r4, #16]
 8005858:	f8cd a000 	str.w	sl, [sp]
 800585c:	464b      	mov	r3, r9
 800585e:	aa03      	add	r2, sp, #12
 8005860:	4621      	mov	r1, r4
 8005862:	4640      	mov	r0, r8
 8005864:	f7ff fee4 	bl	8005630 <_printf_common>
 8005868:	3001      	adds	r0, #1
 800586a:	d14a      	bne.n	8005902 <_printf_i+0x1f6>
 800586c:	f04f 30ff 	mov.w	r0, #4294967295
 8005870:	b004      	add	sp, #16
 8005872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005876:	6823      	ldr	r3, [r4, #0]
 8005878:	f043 0320 	orr.w	r3, r3, #32
 800587c:	6023      	str	r3, [r4, #0]
 800587e:	4833      	ldr	r0, [pc, #204]	; (800594c <_printf_i+0x240>)
 8005880:	2778      	movs	r7, #120	; 0x78
 8005882:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005886:	6823      	ldr	r3, [r4, #0]
 8005888:	6829      	ldr	r1, [r5, #0]
 800588a:	061f      	lsls	r7, r3, #24
 800588c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005890:	d402      	bmi.n	8005898 <_printf_i+0x18c>
 8005892:	065f      	lsls	r7, r3, #25
 8005894:	bf48      	it	mi
 8005896:	b2b6      	uxthmi	r6, r6
 8005898:	07df      	lsls	r7, r3, #31
 800589a:	bf48      	it	mi
 800589c:	f043 0320 	orrmi.w	r3, r3, #32
 80058a0:	6029      	str	r1, [r5, #0]
 80058a2:	bf48      	it	mi
 80058a4:	6023      	strmi	r3, [r4, #0]
 80058a6:	b91e      	cbnz	r6, 80058b0 <_printf_i+0x1a4>
 80058a8:	6823      	ldr	r3, [r4, #0]
 80058aa:	f023 0320 	bic.w	r3, r3, #32
 80058ae:	6023      	str	r3, [r4, #0]
 80058b0:	2310      	movs	r3, #16
 80058b2:	e7a7      	b.n	8005804 <_printf_i+0xf8>
 80058b4:	4824      	ldr	r0, [pc, #144]	; (8005948 <_printf_i+0x23c>)
 80058b6:	e7e4      	b.n	8005882 <_printf_i+0x176>
 80058b8:	4615      	mov	r5, r2
 80058ba:	e7bd      	b.n	8005838 <_printf_i+0x12c>
 80058bc:	682b      	ldr	r3, [r5, #0]
 80058be:	6826      	ldr	r6, [r4, #0]
 80058c0:	6961      	ldr	r1, [r4, #20]
 80058c2:	1d18      	adds	r0, r3, #4
 80058c4:	6028      	str	r0, [r5, #0]
 80058c6:	0635      	lsls	r5, r6, #24
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	d501      	bpl.n	80058d0 <_printf_i+0x1c4>
 80058cc:	6019      	str	r1, [r3, #0]
 80058ce:	e002      	b.n	80058d6 <_printf_i+0x1ca>
 80058d0:	0670      	lsls	r0, r6, #25
 80058d2:	d5fb      	bpl.n	80058cc <_printf_i+0x1c0>
 80058d4:	8019      	strh	r1, [r3, #0]
 80058d6:	2300      	movs	r3, #0
 80058d8:	6123      	str	r3, [r4, #16]
 80058da:	4615      	mov	r5, r2
 80058dc:	e7bc      	b.n	8005858 <_printf_i+0x14c>
 80058de:	682b      	ldr	r3, [r5, #0]
 80058e0:	1d1a      	adds	r2, r3, #4
 80058e2:	602a      	str	r2, [r5, #0]
 80058e4:	681d      	ldr	r5, [r3, #0]
 80058e6:	6862      	ldr	r2, [r4, #4]
 80058e8:	2100      	movs	r1, #0
 80058ea:	4628      	mov	r0, r5
 80058ec:	f7fa fc98 	bl	8000220 <memchr>
 80058f0:	b108      	cbz	r0, 80058f6 <_printf_i+0x1ea>
 80058f2:	1b40      	subs	r0, r0, r5
 80058f4:	6060      	str	r0, [r4, #4]
 80058f6:	6863      	ldr	r3, [r4, #4]
 80058f8:	6123      	str	r3, [r4, #16]
 80058fa:	2300      	movs	r3, #0
 80058fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005900:	e7aa      	b.n	8005858 <_printf_i+0x14c>
 8005902:	6923      	ldr	r3, [r4, #16]
 8005904:	462a      	mov	r2, r5
 8005906:	4649      	mov	r1, r9
 8005908:	4640      	mov	r0, r8
 800590a:	47d0      	blx	sl
 800590c:	3001      	adds	r0, #1
 800590e:	d0ad      	beq.n	800586c <_printf_i+0x160>
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	079b      	lsls	r3, r3, #30
 8005914:	d413      	bmi.n	800593e <_printf_i+0x232>
 8005916:	68e0      	ldr	r0, [r4, #12]
 8005918:	9b03      	ldr	r3, [sp, #12]
 800591a:	4298      	cmp	r0, r3
 800591c:	bfb8      	it	lt
 800591e:	4618      	movlt	r0, r3
 8005920:	e7a6      	b.n	8005870 <_printf_i+0x164>
 8005922:	2301      	movs	r3, #1
 8005924:	4632      	mov	r2, r6
 8005926:	4649      	mov	r1, r9
 8005928:	4640      	mov	r0, r8
 800592a:	47d0      	blx	sl
 800592c:	3001      	adds	r0, #1
 800592e:	d09d      	beq.n	800586c <_printf_i+0x160>
 8005930:	3501      	adds	r5, #1
 8005932:	68e3      	ldr	r3, [r4, #12]
 8005934:	9903      	ldr	r1, [sp, #12]
 8005936:	1a5b      	subs	r3, r3, r1
 8005938:	42ab      	cmp	r3, r5
 800593a:	dcf2      	bgt.n	8005922 <_printf_i+0x216>
 800593c:	e7eb      	b.n	8005916 <_printf_i+0x20a>
 800593e:	2500      	movs	r5, #0
 8005940:	f104 0619 	add.w	r6, r4, #25
 8005944:	e7f5      	b.n	8005932 <_printf_i+0x226>
 8005946:	bf00      	nop
 8005948:	08005abd 	.word	0x08005abd
 800594c:	08005ace 	.word	0x08005ace

08005950 <memmove>:
 8005950:	4288      	cmp	r0, r1
 8005952:	b510      	push	{r4, lr}
 8005954:	eb01 0402 	add.w	r4, r1, r2
 8005958:	d902      	bls.n	8005960 <memmove+0x10>
 800595a:	4284      	cmp	r4, r0
 800595c:	4623      	mov	r3, r4
 800595e:	d807      	bhi.n	8005970 <memmove+0x20>
 8005960:	1e43      	subs	r3, r0, #1
 8005962:	42a1      	cmp	r1, r4
 8005964:	d008      	beq.n	8005978 <memmove+0x28>
 8005966:	f811 2b01 	ldrb.w	r2, [r1], #1
 800596a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800596e:	e7f8      	b.n	8005962 <memmove+0x12>
 8005970:	4402      	add	r2, r0
 8005972:	4601      	mov	r1, r0
 8005974:	428a      	cmp	r2, r1
 8005976:	d100      	bne.n	800597a <memmove+0x2a>
 8005978:	bd10      	pop	{r4, pc}
 800597a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800597e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005982:	e7f7      	b.n	8005974 <memmove+0x24>

08005984 <_sbrk_r>:
 8005984:	b538      	push	{r3, r4, r5, lr}
 8005986:	4d06      	ldr	r5, [pc, #24]	; (80059a0 <_sbrk_r+0x1c>)
 8005988:	2300      	movs	r3, #0
 800598a:	4604      	mov	r4, r0
 800598c:	4608      	mov	r0, r1
 800598e:	602b      	str	r3, [r5, #0]
 8005990:	f7fb f814 	bl	80009bc <_sbrk>
 8005994:	1c43      	adds	r3, r0, #1
 8005996:	d102      	bne.n	800599e <_sbrk_r+0x1a>
 8005998:	682b      	ldr	r3, [r5, #0]
 800599a:	b103      	cbz	r3, 800599e <_sbrk_r+0x1a>
 800599c:	6023      	str	r3, [r4, #0]
 800599e:	bd38      	pop	{r3, r4, r5, pc}
 80059a0:	20000294 	.word	0x20000294

080059a4 <memcpy>:
 80059a4:	440a      	add	r2, r1
 80059a6:	4291      	cmp	r1, r2
 80059a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80059ac:	d100      	bne.n	80059b0 <memcpy+0xc>
 80059ae:	4770      	bx	lr
 80059b0:	b510      	push	{r4, lr}
 80059b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059ba:	4291      	cmp	r1, r2
 80059bc:	d1f9      	bne.n	80059b2 <memcpy+0xe>
 80059be:	bd10      	pop	{r4, pc}

080059c0 <_realloc_r>:
 80059c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059c4:	4680      	mov	r8, r0
 80059c6:	4614      	mov	r4, r2
 80059c8:	460e      	mov	r6, r1
 80059ca:	b921      	cbnz	r1, 80059d6 <_realloc_r+0x16>
 80059cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059d0:	4611      	mov	r1, r2
 80059d2:	f7ff bc49 	b.w	8005268 <_malloc_r>
 80059d6:	b92a      	cbnz	r2, 80059e4 <_realloc_r+0x24>
 80059d8:	f7ff fbda 	bl	8005190 <_free_r>
 80059dc:	4625      	mov	r5, r4
 80059de:	4628      	mov	r0, r5
 80059e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059e4:	f000 f81b 	bl	8005a1e <_malloc_usable_size_r>
 80059e8:	4284      	cmp	r4, r0
 80059ea:	4607      	mov	r7, r0
 80059ec:	d802      	bhi.n	80059f4 <_realloc_r+0x34>
 80059ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80059f2:	d812      	bhi.n	8005a1a <_realloc_r+0x5a>
 80059f4:	4621      	mov	r1, r4
 80059f6:	4640      	mov	r0, r8
 80059f8:	f7ff fc36 	bl	8005268 <_malloc_r>
 80059fc:	4605      	mov	r5, r0
 80059fe:	2800      	cmp	r0, #0
 8005a00:	d0ed      	beq.n	80059de <_realloc_r+0x1e>
 8005a02:	42bc      	cmp	r4, r7
 8005a04:	4622      	mov	r2, r4
 8005a06:	4631      	mov	r1, r6
 8005a08:	bf28      	it	cs
 8005a0a:	463a      	movcs	r2, r7
 8005a0c:	f7ff ffca 	bl	80059a4 <memcpy>
 8005a10:	4631      	mov	r1, r6
 8005a12:	4640      	mov	r0, r8
 8005a14:	f7ff fbbc 	bl	8005190 <_free_r>
 8005a18:	e7e1      	b.n	80059de <_realloc_r+0x1e>
 8005a1a:	4635      	mov	r5, r6
 8005a1c:	e7df      	b.n	80059de <_realloc_r+0x1e>

08005a1e <_malloc_usable_size_r>:
 8005a1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a22:	1f18      	subs	r0, r3, #4
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	bfbc      	itt	lt
 8005a28:	580b      	ldrlt	r3, [r1, r0]
 8005a2a:	18c0      	addlt	r0, r0, r3
 8005a2c:	4770      	bx	lr
	...

08005a30 <_init>:
 8005a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a32:	bf00      	nop
 8005a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a36:	bc08      	pop	{r3}
 8005a38:	469e      	mov	lr, r3
 8005a3a:	4770      	bx	lr

08005a3c <_fini>:
 8005a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a3e:	bf00      	nop
 8005a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a42:	bc08      	pop	{r3}
 8005a44:	469e      	mov	lr, r3
 8005a46:	4770      	bx	lr
